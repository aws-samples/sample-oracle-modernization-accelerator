{
  "testInfo" : {
    "timestamp" : "2025-08-24 07:24:13",
    "directory" : "/home/ec2-user/workspace/src-orcl/src/main/resources/sqlmap/mapper/",
    "databaseType" : "POSTGRES",
    "totalTests" : 76,
    "successCount" : 15,
    "failureCount" : 61,
    "successRate" : "19.7"
  },
  "successfulTests" : [ {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserRegistrationTrend",
    "sqlType" : "SELECT",
    "rowCount" : 8
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectRevenueTrend",
    "sqlType" : "SELECT",
    "rowCount" : 205
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectCategoryRevenueAnalysis",
    "sqlType" : "SELECT",
    "rowCount" : 18
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderStatusStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 6
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderTrendAnalysis",
    "sqlType" : "SELECT",
    "rowCount" : 218
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectPaymentMethodStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 1
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentMethodStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 1
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentStatusStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 3
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectDailyPaymentTrend",
    "sqlType" : "SELECT",
    "rowCount" : 218
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentFailureAnalysis",
    "sqlType" : "SELECT",
    "rowCount" : 1
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectRefundStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 0
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentProcessingTimeAnalysis",
    "sqlType" : "SELECT",
    "rowCount" : 1
  }, {
    "xmlFile" : "ProductAdvancedMapper.xml",
    "sqlId" : "selectPriceHistoryAnalysis",
    "sqlType" : "SELECT",
    "rowCount" : 760
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectBrandStatistics",
    "sqlType" : "SELECT",
    "rowCount" : 31
  }, {
    "xmlFile" : "CustomerServiceMapper.xml",
    "sqlId" : "selectCustomerSupportEscalationChain",
    "sqlType" : "SELECT",
    "rowCount" : 85
  } ],
  "failedTests" : [ {
    "xmlFile" : "PromotionMapper.xml",
    "sqlId" : "selectPromotionEffectivenessAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1193\n### The error may exist in file:///tmp/mapper-1825841323634750149.xml\n### The error may involve amzn.bo.mapper.PromotionMapper.selectPromotionEffectivenessAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PROMOTION_ID,             p.PROMOTION_NAME,             p.PROMOTION_TYPE,             p.DISCOUNT_TYPE,             p.DISCOUNT_VALUE,             p.START_DATE,             p.END_DATE,             p.IS_ACTIVE,             p.CURRENT_USAGE_COUNT,             p.TOTAL_USAGE_LIMIT,             ROUND(p.CURRENT_USAGE_COUNT * 100.0 / GREATEST(p.TOTAL_USAGE_LIMIT, 1), 2) as USAGE_RATE_PCT,             CASE                  WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT THEN 'FULLY_USED'                 WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT * 0.8 THEN 'HIGH_USAGE'                 WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT * 0.5 THEN 'MEDIUM_USAGE'                 WHEN p.CURRENT_USAGE_COUNT > 0 THEN 'LOW_USAGE'                 ELSE 'NO_USAGE'             END as USAGE_STATUS,             CASE                  WHEN p.CURRENT_USAGE_COUNT >= 100 THEN 'HIGH_IMPACT'                 WHEN p.CURRENT_USAGE_COUNT >= 50 THEN 'MEDIUM_IMPACT'                 WHEN p.CURRENT_USAGE_COUNT > 0 THEN 'LOW_IMPACT'                 ELSE 'NO_IMPACT'             END as IMPACT_LEVEL         FROM PROMOTIONS p         WHERE p.IS_ACTIVE = 'Y'           AND p.START_DATE >= SYSDATE - 90           ORDER BY p.CURRENT_USAGE_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1193"
  }, {
    "xmlFile" : "PromotionMapper.xml",
    "sqlId" : "selectCouponUsagePatternAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1003\n### The error may exist in file:///tmp/mapper-7165788738731003780.xml\n### The error may involve amzn.bo.mapper.PromotionMapper.selectCouponUsagePatternAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PROMOTION_ID,             p.PROMOTION_NAME as COUPON_CODE,             p.PROMOTION_TYPE as COUPON_TYPE,             p.DISCOUNT_TYPE,             p.DISCOUNT_VALUE,             p.MIN_QUANTITY as MIN_ORDER_AMOUNT,             p.TOTAL_USAGE_LIMIT as MAX_USAGE_COUNT,             p.CURRENT_USAGE_COUNT as TOTAL_USAGE_COUNT,             p.START_DATE,             p.END_DATE,             ROUND(p.CURRENT_USAGE_COUNT * 100.0 / GREATEST(p.TOTAL_USAGE_LIMIT, 1), 2) as USAGE_RATE_PCT,             CASE                  WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT THEN 'FULLY_USED'                 WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT * 0.8 THEN 'HIGHLY_USED'                 WHEN p.CURRENT_USAGE_COUNT >= p.TOTAL_USAGE_LIMIT * 0.5 THEN 'MODERATELY_USED'                 WHEN p.CURRENT_USAGE_COUNT > 0 THEN 'LIGHTLY_USED'                 ELSE 'UNUSED'             END as USAGE_STATUS         FROM PROMOTIONS p         WHERE p.IS_ACTIVE = 'Y'           AND p.CREATED_AT >= SYSDATE - 90           ORDER BY p.CURRENT_USAGE_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1003"
  }, {
    "xmlFile" : "PromotionMapper.xml",
    "sqlId" : "selectPromotionABTestAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 647\n### The error may exist in file:///tmp/mapper-8539062730761104623.xml\n### The error may involve amzn.bo.mapper.PromotionMapper.selectPromotionABTestAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PROMOTION_ID,             p.PROMOTION_NAME,             p.PROMOTION_TYPE,             p.DISCOUNT_VALUE,             'A' as TEST_GROUP,             p.CURRENT_USAGE_COUNT as ORDER_COUNT,             p.CURRENT_USAGE_COUNT as CUSTOMER_COUNT,             p.CURRENT_USAGE_COUNT * p.DISCOUNT_VALUE as TOTAL_REVENUE,             p.DISCOUNT_VALUE as AVG_ORDER_VALUE,             ROUND(p.CURRENT_USAGE_COUNT * 100.0 / GREATEST(p.TOTAL_USAGE_LIMIT, 1), 2) as CONVERSION_RATE,             p.CURRENT_USAGE_COUNT * p.DISCOUNT_VALUE as TOTAL_DISCOUNT         FROM PROMOTIONS p         WHERE p.IS_ACTIVE = 'Y'           AND p.START_DATE >= SYSDATE - 30           ORDER BY TOTAL_REVENUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 647"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserList",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1672\n### The error may exist in file:///tmp/mapper-12399307793749166241.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserList-Inline\n### The error occurred while setting parameters\n### SQL: SELECT * FROM (             SELECT                  u.USER_ID,                 u.EMAIL,                 u.FIRST_NAME,                 u.LAST_NAME,                 u.PHONE,                 u.STATUS,                 u.CREATED_AT,                 u.UPDATED_AT,                 NVL(order_stats.ORDER_COUNT, 0) as ORDER_COUNT,                 NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,                 NVL(order_stats.AVG_ORDER_VALUE, 0) as AVG_ORDER_VALUE,                 DECODE(u.STATUS, 'ACTIVE', 1, 'INACTIVE', 2, 'SUSPENDED', 3, 4) as STATUS_PRIORITY,                 DENSE_RANK() OVER (ORDER BY NVL(order_stats.TOTAL_SPENT, 0) DESC) as SPENDING_RANK,                                   CASE                      WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                     WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                     WHEN NVL(order_stats.ORDER_COUNT, 0) > 0 THEN 'REGULAR'                     ELSE 'NEW'                 END as USER_GRADE,                                   TRUNC(SYSDATE) - TRUNC(u.CREATED_AT) as DAYS_SINCE_REGISTRATION,                 ROW_NUMBER() OVER (ORDER BY u.CREATED_AT DESC) as RN             FROM USERS u,                  (SELECT                      o.USER_ID,                     COUNT(*) as ORDER_COUNT,                     SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                     AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                     MAX(o.ORDERED_AT) as LAST_ORDER_DATE                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o.USER_ID) order_stats             WHERE u.USER_ID = order_stats.USER_ID(+)                               AND UPPER(u.EMAIL) LIKE '%' || UPPER(?) || '%'                                                                           AND u.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                 AND u.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                                     )                         WHERE ROWNUM <= ? + ?               AND RN > ?                   ORDER BY STATUS_PRIORITY, SPENDING_RANK\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1672"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserCount",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 370\n### The error may exist in file:///tmp/mapper-12160043075426668737.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserCount-Inline\n### The error occurred while setting parameters\n### SQL: SELECT COUNT(*)          FROM USERS u,              (SELECT                  o.USER_ID,                 COUNT(*) as ORDER_COUNT,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT               FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY o.USER_ID) order_stats         WHERE u.USER_ID = order_stats.USER_ID(+)                       AND UPPER(u.EMAIL) LIKE '%' || UPPER(?) || '%'                                                       AND u.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                     AND u.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 370"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserDetail",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1168\n### The error may exist in file:///tmp/mapper-6288129058554109180.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserDetail-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME,             u.LAST_NAME,             u.PHONE,             u.STATUS,             u.CREATED_AT,             u.UPDATED_AT,             NVL(order_stats.ORDER_COUNT, 0) as ORDER_COUNT,             NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,             NVL(order_stats.AVG_ORDER_VALUE, 0) as AVG_ORDER_VALUE,             CASE                  WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                 WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                 WHEN NVL(order_stats.ORDER_COUNT, 0) > 0 THEN 'REGULAR'                 ELSE 'NEW'             END as USER_GRADE,             TRUNC(SYSDATE) - TRUNC(u.CREATED_AT) as DAYS_SINCE_REGISTRATION         FROM USERS u,              (SELECT                  o.USER_ID,                 COUNT(*) as ORDER_COUNT,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                 AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE               FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY o.USER_ID) order_stats         WHERE u.USER_ID = order_stats.USER_ID(+)         AND u.USER_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1168"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserActivityStats",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1610\n### The error may exist in file:///tmp/mapper-8604042790263927542.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserActivityStats-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,             TO_CHAR(u.CREATED_AT, 'YYYY-MM-DD HH24:MI:SS') as REGISTRATION_DATE,             NVL(order_stats.TOTAL_ORDERS, 0) as TOTAL_ORDERS,             NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,             NVL(order_stats.AVG_ORDER_VALUE, 0) as AVG_ORDER_VALUE,             TO_CHAR(NVL(order_stats.LAST_ORDER_DATE, u.CREATED_AT), 'YYYY-MM-DD HH24:MI:SS') as LAST_ORDER_DATE,             NVL(TRUNC(SYSDATE) - TRUNC(order_stats.LAST_ORDER_DATE), 999) as DAYS_SINCE_LAST_ORDER,             CASE                  WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                 WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                 WHEN NVL(order_stats.TOTAL_ORDERS, 0) > 0 THEN 'REGULAR'                 ELSE 'NEW'             END as USER_GRADE,             TRUNC(SYSDATE) - TRUNC(u.CREATED_AT) as DAYS_SINCE_REGISTRATION,             'N/A' as FAVORITE_CATEGORY,             0 as FAVORITE_CATEGORY_ORDERS,             'N/A' as PREFERRED_PAYMENT_METHOD,             0 as PAYMENT_METHOD_USAGE_COUNT         FROM USERS u,              (SELECT                  o.USER_ID,                 COUNT(*) as TOTAL_ORDERS,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                 AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                 MAX(o.ORDERED_AT) as LAST_ORDER_DATE               FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY o.USER_ID) order_stats         WHERE u.USER_ID = order_stats.USER_ID(+)         AND u.USER_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1610"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserOrderHistory",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 724\n### The error may exist in file:///tmp/mapper-11388400496336925314.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserOrderHistory-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              o.ORDER_ID,             o.ORDER_NUMBER,             o.ORDER_STATUS,             o.TOTAL_AMOUNT,             o.CURRENCY,             o.PAYMENT_METHOD,             TO_CHAR(o.ORDERED_AT, 'YYYY-MM-DD HH24:MI:SS') as ORDERED_AT,             TO_CHAR(o.SHIPPED_AT, 'YYYY-MM-DD HH24:MI:SS') as SHIPPED_AT,             TO_CHAR(o.DELIVERED_AT, 'YYYY-MM-DD HH24:MI:SS') as DELIVERED_AT,             COUNT(oi.ORDER_ITEM_ID) as ITEM_COUNT,             COUNT(DISTINCT oi.PRODUCT_ID) as UNIQUE_PRODUCTS,             LISTAGG(p.PRODUCT_NAME, ', ') WITHIN GROUP (ORDER BY p.PRODUCT_NAME) as PRODUCT_NAMES         FROM ORDERS o,              ORDER_ITEMS oi,              PRODUCTS p         WHERE o.ORDER_ID = oi.ORDER_ID(+)         AND oi.PRODUCT_ID = p.PRODUCT_ID(+)         AND o.USER_ID = ?         GROUP BY o.ORDER_ID, o.ORDER_NUMBER, o.ORDER_STATUS, o.TOTAL_AMOUNT,                   o.CURRENCY, o.PAYMENT_METHOD, o.ORDERED_AT, o.SHIPPED_AT, o.DELIVERED_AT                           ORDER BY o.ORDERED_AT DESC                 FETCH FIRST ? ROWS ONLY\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 724"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserGradeStatistics",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1322\n### The error may exist in file:///tmp/mapper-14541426817864851482.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              user_grade,             COUNT(*) as USER_COUNT,             SUM(total_spent) as TOTAL_REVENUE,             AVG(total_spent) as AVG_REVENUE_PER_USER,             SUM(order_count) as TOTAL_ORDERS,             AVG(order_count) as AVG_ORDERS_PER_USER,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as USER_PERCENTAGE,             ROUND(SUM(total_spent) * 100.0 / SUM(SUM(total_spent)) OVER(), 2) as REVENUE_PERCENTAGE         FROM (             SELECT                  CASE                      WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                     WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                     WHEN NVL(order_stats.ORDER_COUNT, 0) > 0 THEN 'REGULAR'                     ELSE 'NEW'                 END as user_grade,                 NVL(order_stats.TOTAL_SPENT, 0) as total_spent,                 NVL(order_stats.ORDER_COUNT, 0) as order_count             FROM USERS u,                  (SELECT                      o.USER_ID,                     COUNT(*) as ORDER_COUNT,                     SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o.USER_ID) order_stats             WHERE u.USER_ID = order_stats.USER_ID(+)         )         GROUP BY user_grade         ORDER BY              CASE user_grade                  WHEN 'VIP' THEN 1                  WHEN 'PREMIUM' THEN 2                  WHEN 'REGULAR' THEN 3                  WHEN 'NEW' THEN 4              END\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1322"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserHierarchyStats",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1450\n### The error may exist in file:///tmp/mapper-1221857420424653274.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserHierarchyStats-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              user_grade,             status,             country,             COUNT(*) as USER_COUNT,             SUM(total_spent) as TOTAL_REVENUE,             AVG(total_spent) as AVG_REVENUE_PER_USER,             SUM(order_count) as TOTAL_ORDERS,             AVG(order_count) as AVG_ORDERS_PER_USER,             GROUPING(user_grade) as GRADE_GROUPING,             GROUPING(status) as STATUS_GROUPING,             GROUPING(country) as COUNTRY_GROUPING         FROM (             SELECT                  u.STATUS as status,                 NVL(ua.COUNTRY, 'UNKNOWN') as country,                 CASE                      WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                     WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                     WHEN NVL(order_stats.ORDER_COUNT, 0) > 0 THEN 'REGULAR'                     ELSE 'NEW'                 END as user_grade,                 NVL(order_stats.TOTAL_SPENT, 0) as total_spent,                 NVL(order_stats.ORDER_COUNT, 0) as order_count             FROM USERS u,                  USER_ADDRESSES ua,                  (SELECT                      o.USER_ID,                     COUNT(*) as ORDER_COUNT,                     SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o.USER_ID) order_stats             WHERE u.USER_ID = ua.USER_ID(+)             AND ua.ADDRESS_TYPE(+) = 'SHIPPING'             AND ua.IS_DEFAULT(+) = 'Y'             AND u.USER_ID = order_stats.USER_ID(+)         )         GROUP BY CUBE(user_grade, status, country)         ORDER BY              GROUPING(user_grade),              GROUPING(status),              GROUPING(country),             USER_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1450"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserBehaviorPattern",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1220\n### The error may exist in file:///tmp/mapper-11848796158738129707.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserBehaviorPattern-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,             NVL(order_stats.TOTAL_ORDERS, 0) as TOTAL_ORDERS,             NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,             NVL(order_stats.AVG_ORDER_VALUE, 0) as AVG_ORDER_VALUE,             NVL(order_stats.DAYS_SINCE_LAST_ORDER, 999) as DAYS_SINCE_LAST_ORDER,             0 as PURCHASE_FREQUENCY,             'UNKNOWN' as FAVORITE_CATEGORY,             'UNKNOWN' as PREFERRED_PAYMENT_METHOD,             'UNKNOWN' as SEASONAL_PATTERN,             50 as LOYALTY_SCORE,             30 as CHURN_PROBABILITY,             SYSDATE + 60 as NEXT_PURCHASE_PREDICTION,             'REGULAR' as CUSTOMER_SEGMENT         FROM USERS u,              (SELECT                  o.USER_ID,                 COUNT(*) as TOTAL_ORDERS,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                 AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                 TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) as DAYS_SINCE_LAST_ORDER               FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY o.USER_ID) order_stats         WHERE u.USER_ID = order_stats.USER_ID(+)         ORDER BY TOTAL_SPENT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1220"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserDemographicStats",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1281\n### The error may exist in file:///tmp/mapper-10053310037790450099.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              country,             age_group,             COUNT(*) as USER_COUNT,             SUM(total_spent) as TOTAL_REVENUE,             AVG(total_spent) as AVG_REVENUE_PER_USER,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as USER_PERCENTAGE,             ROUND(SUM(total_spent) * 100.0 / SUM(SUM(total_spent)) OVER(), 2) as REVENUE_PERCENTAGE,             GROUPING(country) as COUNTRY_GROUPING,             GROUPING(age_group) as AGE_GROUPING         FROM (             SELECT                  NVL(ua.COUNTRY, 'UNKNOWN') as country,                                   CASE                      WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, u.DATE_OF_BIRTH) / 12) < 25 THEN 'UNDER_25'                     WHEN TRUNC(MONTHS_BETWEEN(SYSDATE, u.DATE_OF_BIRTH) / 12) BETWEEN 25 AND 34 THEN '25_34'                     ELSE 'OVER_35'                 END as age_group,                                   NVL(order_stats.TOTAL_SPENT, 0) as total_spent             FROM USERS u,                  USER_ADDRESSES ua,                  (SELECT USER_ID, SUM(TOTAL_AMOUNT) as TOTAL_SPENT                    FROM ORDERS                    WHERE ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY USER_ID) order_stats             WHERE u.USER_ID = ua.USER_ID(+)             AND ua.ADDRESS_TYPE(+) = 'SHIPPING'             AND ua.IS_DEFAULT(+) = 'Y'             AND u.USER_ID = order_stats.USER_ID(+)         )         GROUP BY ROLLUP(country, age_group)         ORDER BY GROUPING(country), GROUPING(age_group), USER_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1281"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserLifecycleAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1136\n### The error may exist in file:///tmp/mapper-3642540316414079959.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserLifecycleAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.CREATED_AT as REGISTRATION_DATE,             order_stats.FIRST_ORDER_DATE,             order_stats.LAST_ORDER_DATE,             NVL(TRUNC(order_stats.FIRST_ORDER_DATE) - TRUNC(u.CREATED_AT), 999) as DAYS_TO_FIRST_ORDER,             NVL(TRUNC(SYSDATE) - TRUNC(order_stats.LAST_ORDER_DATE), 999) as DAYS_SINCE_LAST_ORDER,             NVL(order_stats.TOTAL_ORDERS, 0) as TOTAL_ORDERS,             NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,             'ACTIVE' as LIFECYCLE_STAGE,             50 as ACTIVITY_SCORE,             SYSDATE + 30 as PREDICTED_NEXT_ORDER,             80 as RETENTION_PROBABILITY         FROM USERS u,              (SELECT                  o.USER_ID,                 MIN(o.ORDERED_AT) as FIRST_ORDER_DATE,                 MAX(o.ORDERED_AT) as LAST_ORDER_DATE,                 COUNT(*) as TOTAL_ORDERS,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT               FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY o.USER_ID) order_stats         WHERE u.USER_ID = order_stats.USER_ID(+)         ORDER BY ACTIVITY_SCORE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1136"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectDormantUserAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 3511\n### The error may exist in file:///tmp/mapper-14338838369663614879.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectDormantUserAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,             u.CREATED_AT as REGISTRATION_DATE,             dormant_stats.LAST_ORDER_DATE,             dormant_stats.DAYS_DORMANT,             dormant_stats.TOTAL_ORDERS,             dormant_stats.TOTAL_SPENT,             dormant_stats.AVG_ORDER_VALUE,             dormant_stats.FAVORITE_CATEGORY,             dormant_stats.LAST_VIEWED_PRODUCT,             dormant_stats.REACTIVATION_PROBABILITY,             dormant_stats.RECOMMENDED_INCENTIVE,             RANK() OVER (ORDER BY dormant_stats.REACTIVATION_PROBABILITY DESC, dormant_stats.TOTAL_SPENT DESC) as REACTIVATION_PRIORITY         FROM USERS u,              (SELECT                  o.USER_ID,                 MAX(o.ORDERED_AT) as LAST_ORDER_DATE,                 TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) as DAYS_DORMANT,                 COUNT(*) as TOTAL_ORDERS,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                 AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                 -- 가장 많이 구매한 카테고리                 (SELECT c.CATEGORY_NAME                   FROM (SELECT p.CATEGORY_ID, COUNT(*) as cnt                        FROM ORDER_ITEMS oi, PRODUCTS p                        WHERE oi.PRODUCT_ID = p.PRODUCT_ID                        AND oi.ORDER_ID IN (SELECT ORDER_ID FROM ORDERS WHERE USER_ID = o.USER_ID)                        GROUP BY p.CATEGORY_ID                        ORDER BY cnt DESC                        FETCH FIRST 1 ROWS ONLY) top_cat, CATEGORIES c                  WHERE top_cat.CATEGORY_ID = c.CATEGORY_ID) as FAVORITE_CATEGORY,                 -- 마지막으로 본 상품                 (SELECT p.PRODUCT_NAME                  FROM PRODUCT_VIEWS pv, PRODUCTS p                  WHERE pv.PRODUCT_ID = p.PRODUCT_ID                  AND pv.USER_ID = o.USER_ID                  AND pv.VIEWED_AT = (SELECT MAX(VIEWED_AT) FROM PRODUCT_VIEWS WHERE USER_ID = o.USER_ID)) as LAST_VIEWED_PRODUCT,                 -- 재활성화 확률 계산                                   CASE                      WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) BETWEEN 90 AND 180 AND COUNT(*) >= 3 THEN 75                     WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) BETWEEN 90 AND 180 AND COUNT(*) >= 1 THEN 60                     WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) BETWEEN 181 AND 365 AND SUM(o.TOTAL_AMOUNT) >= 500 THEN 45                     WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) BETWEEN 181 AND 365 THEN 30                     WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) > 365 AND SUM(o.TOTAL_AMOUNT) >= 1000 THEN 25                     ELSE 15                 END as REACTIVATION_PROBABILITY,                                   -- 추천 인센티브                                   CASE                      WHEN AVG(o.TOTAL_AMOUNT) >= 200 THEN 'PREMIUM_DISCOUNT'                     WHEN COUNT(*) >= 5 THEN 'LOYALTY_BONUS'                     WHEN TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) > 365 THEN 'WELCOME_BACK_OFFER'                     ELSE 'STANDARD_COUPON'                 END as RECOMMENDED_INCENTIVE                                 FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                 AND TRUNC(SYSDATE) - TRUNC(o.ORDERED_AT) >= ?                 GROUP BY o.USER_ID                 HAVING MAX(o.ORDERED_AT) < SYSDATE - ?) dormant_stats,                CATEGORIES c         WHERE u.USER_ID = dormant_stats.USER_ID         AND dormant_stats.FAVORITE_CATEGORY = c.CATEGORY_ID(+)                         AND dormant_stats.REACTIVATION_PROBABILITY >= ?                     ORDER BY REACTIVATION_PRIORITY\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 3511"
  }, {
    "xmlFile" : "UserMapper.xml",
    "sqlId" : "selectUserReferralHierarchy",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \".\"\n  Position: 282\n### The error may exist in file:///tmp/mapper-2544794615628074587.xml\n### The error may involve amzn.bo.mapper.UserMapper.selectUserReferralHierarchy-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,             u.REFERRED_BY_USER_ID,             LEVEL as REFERRAL_LEVEL,             SYS_CONNECT_BY_PATH(u.EMAIL, ' -> ') as REFERRAL_PATH,             CONNECT_BY_ROOT u.EMAIL as ROOT_REFERRER_EMAIL,             CONNECT_BY_ROOT u.USER_ID as ROOT_REFERRER_ID,             CONNECT_BY_ISLEAF as IS_LEAF_NODE,             0 as DIRECT_REFERRALS_COUNT,             0 as TOTAL_NETWORK_SIZE,             0 as NETWORK_TOTAL_REVENUE,             0 as REFERRAL_BONUS_EARNED,             'FIRST_GENERATION' as REFERRAL_GENERATION         FROM USERS u         START WITH u.REFERRED_BY_USER_ID IS NULL         CONNECT BY NOCYCLE PRIOR u.USER_ID = u.REFERRED_BY_USER_ID           AND LEVEL <= 3           ORDER BY REFERRAL_LEVEL\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \".\"\n  Position: 282"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectSalesDashboard",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1171\n### The error may exist in file:///tmp/mapper-12764944516910560774.xml\n### The error may involve amzn.bo.mapper.AnalyticsMapper.selectSalesDashboard-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              TO_CHAR(o.ORDERED_AT, 'YYYY-MM') as TIME_PERIOD,             c.CATEGORY_NAME as CATEGORY_NAME,             NVL(ua.COUNTRY, 'UNKNOWN') as COUNTRY,             o.PAYMENT_METHOD as PAYMENT_METHOD,             COUNT(DISTINCT o.ORDER_ID) as ORDER_COUNT,             SUM(o.TOTAL_AMOUNT) as TOTAL_REVENUE,             AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,             SUM(oi.QUANTITY) as TOTAL_QUANTITY_SOLD,             COUNT(DISTINCT o.USER_ID) as UNIQUE_CUSTOMERS,             0 as REVENUE_GROWTH_RATE,             0 as MARKET_SHARE_PERCENTAGE,             0 as REVENUE_PER_CUSTOMER,             0 as ORDER_CONVERSION_RATE,             0 as TOP_20_PERCENT_REVENUE_SHARE,             0 as SEASONALITY_INDEX,             0 as TIME_GROUPING,             0 as CATEGORY_GROUPING,             0 as COUNTRY_GROUPING,             0 as PAYMENT_GROUPING         FROM ORDERS o,              ORDER_ITEMS oi,              PRODUCTS p,              CATEGORIES c,              USER_ADDRESSES ua         WHERE o.ORDER_ID = oi.ORDER_ID         AND oi.PRODUCT_ID = p.PRODUCT_ID         AND p.CATEGORY_ID = c.CATEGORY_ID         AND o.SHIPPING_ADDRESS_ID = ua.ADDRESS_ID(+)         AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')         AND o.ORDERED_AT >= ADD_MONTHS(SYSDATE, -12)         GROUP BY TO_CHAR(o.ORDERED_AT, 'YYYY-MM'), c.CATEGORY_NAME, NVL(ua.COUNTRY, 'UNKNOWN'), o.PAYMENT_METHOD         ORDER BY TOTAL_REVENUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1171"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectCustomerBehaviorAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"(\"\n  Position: 5625\n### The error may exist in file:///tmp/mapper-5098607422720295040.xml\n### The error may involve amzn.bo.mapper.AnalyticsMapper.selectCustomerBehaviorAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              behavior_data.USER_ID,             behavior_data.EMAIL,             behavior_data.REGISTRATION_DATE,             behavior_data.TOTAL_SESSIONS,             behavior_data.TOTAL_PAGE_VIEWS,             behavior_data.AVG_SESSION_DURATION_MINUTES,             behavior_data.AVG_PAGES_PER_SESSION,             behavior_data.BOUNCE_RATE,             behavior_data.CONVERSION_RATE,             behavior_data.TOTAL_ORDERS,             behavior_data.TOTAL_SPENT,             behavior_data.AVG_ORDER_VALUE,             -- 고객 세그멘테이션             CASE                  WHEN behavior_data.TOTAL_SPENT >= 1000 AND behavior_data.TOTAL_SESSIONS >= 10 THEN 'VIP_ENGAGED'                 WHEN behavior_data.TOTAL_SPENT >= 1000 THEN 'VIP_CASUAL'                 WHEN behavior_data.TOTAL_SESSIONS >= 10 AND behavior_data.CONVERSION_RATE >= 5 THEN 'ENGAGED_CONVERTER'                 WHEN behavior_data.TOTAL_SESSIONS >= 10 THEN 'ENGAGED_BROWSER'                 WHEN behavior_data.TOTAL_ORDERS > 0 THEN 'OCCASIONAL_BUYER'                 ELSE 'BROWSER_ONLY'             END as CUSTOMER_SEGMENT,             -- 행동 점수 (0-100)             ROUND(                 (LEAST(behavior_data.TOTAL_SESSIONS, 20) * 2.5) +                 (LEAST(behavior_data.AVG_PAGES_PER_SESSION, 10) * 5) +                 (behavior_data.CONVERSION_RATE * 2) +                 ((100 - behavior_data.BOUNCE_RATE) * 0.3), 2             ) as ENGAGEMENT_SCORE,             -- 구매 가능성 점수             ROUND(                 behavior_data.CONVERSION_RATE * 0.4 +                 (100 - behavior_data.BOUNCE_RATE) * 0.3 +                 LEAST(behavior_data.AVG_PAGES_PER_SESSION, 10) * 3, 2             ) as PURCHASE_PROPENSITY_SCORE,             -- 선호 카테고리 (가장 많이 본 카테고리)             behavior_data.PREFERRED_CATEGORY,             behavior_data.PREFERRED_CATEGORY_VIEWS,             -- 선호 시간대             behavior_data.PREFERRED_HOUR,             behavior_data.PREFERRED_DAY_OF_WEEK,             -- 디바이스 선호도             behavior_data.PREFERRED_DEVICE_TYPE,             behavior_data.MOBILE_USAGE_RATE,             -- 최근 활동             behavior_data.LAST_SESSION_DATE,             behavior_data.DAYS_SINCE_LAST_SESSION,             behavior_data.LAST_ORDER_DATE,             behavior_data.DAYS_SINCE_LAST_ORDER,             -- 이탈 위험도             CASE                  WHEN behavior_data.DAYS_SINCE_LAST_SESSION > 90 THEN 'HIGH_RISK'                 WHEN behavior_data.DAYS_SINCE_LAST_SESSION > 30 THEN 'MEDIUM_RISK'                 WHEN behavior_data.DAYS_SINCE_LAST_SESSION > 7 THEN 'LOW_RISK'                 ELSE 'ACTIVE'             END as CHURN_RISK,             -- 고객 가치 순위             DENSE_RANK() OVER (ORDER BY behavior_data.TOTAL_SPENT DESC) as CUSTOMER_VALUE_RANK,             -- 참여도 순위             DENSE_RANK() OVER (ORDER BY                  (LEAST(behavior_data.TOTAL_SESSIONS, 20) * 2.5) +                 (LEAST(behavior_data.AVG_PAGES_PER_SESSION, 10) * 5) +                 (behavior_data.CONVERSION_RATE * 2) +                 ((100 - behavior_data.BOUNCE_RATE) * 0.3) DESC             ) as ENGAGEMENT_RANK                   FROM (             SELECT                  u.USER_ID,                 u.EMAIL,                 u.CREATED_AT as REGISTRATION_DATE,                 session_stats.TOTAL_SESSIONS,                 session_stats.TOTAL_PAGE_VIEWS,                 session_stats.AVG_SESSION_DURATION_MINUTES,                 session_stats.AVG_PAGES_PER_SESSION,                 session_stats.BOUNCE_RATE,                 session_stats.CONVERSION_RATE,                 NVL(order_stats.TOTAL_ORDERS, 0) as TOTAL_ORDERS,                 NVL(order_stats.TOTAL_SPENT, 0) as TOTAL_SPENT,                 NVL(order_stats.AVG_ORDER_VALUE, 0) as AVG_ORDER_VALUE,                 session_stats.PREFERRED_CATEGORY,                 session_stats.PREFERRED_CATEGORY_VIEWS,                 session_stats.PREFERRED_HOUR,                 session_stats.PREFERRED_DAY_OF_WEEK,                 session_stats.PREFERRED_DEVICE_TYPE,                 session_stats.MOBILE_USAGE_RATE,                 session_stats.LAST_SESSION_DATE,                 EXTRACT(DAY FROM (SYSDATE - session_stats.LAST_SESSION_DATE)) as DAYS_SINCE_LAST_SESSION,                 order_stats.LAST_ORDER_DATE,                 NVL(EXTRACT(DAY FROM (SYSDATE - order_stats.LAST_ORDER_DATE)), 999) as DAYS_SINCE_LAST_ORDER             FROM USERS u,                  (SELECT                      us.USER_ID,                     COUNT(DISTINCT us.SESSION_ID) as TOTAL_SESSIONS,                     SUM(us.PAGE_VIEWS) as TOTAL_PAGE_VIEWS,                     AVG(CASE                          WHEN us.SESSION_END IS NOT NULL THEN                             (EXTRACT(DAY FROM (us.SESSION_END - us.SESSION_START)) * 24 * 60) +                              (EXTRACT(HOUR FROM (us.SESSION_END - us.SESSION_START)) * 60) +                              EXTRACT(MINUTE FROM (us.SESSION_END - us.SESSION_START))                         ELSE 0                     END) as AVG_SESSION_DURATION_MINUTES,                     AVG(us.PAGE_VIEWS) as AVG_PAGES_PER_SESSION,                     ROUND(                         SUM(CASE WHEN us.PAGE_VIEWS = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                     ) as BOUNCE_RATE,                     ROUND(                         COUNT(DISTINCT CASE WHEN order_sessions.ORDER_ID IS NOT NULL THEN us.SESSION_ID END) * 100.0 / COUNT(DISTINCT us.SESSION_ID), 2                     ) as CONVERSION_RATE,                     MAX(us.SESSION_START) as LAST_SESSION_DATE,                     -- 선호 카테고리 분석                     MAX(category_views.CATEGORY_NAME) KEEP (DENSE_RANK FIRST ORDER BY category_views.VIEW_COUNT DESC) as PREFERRED_CATEGORY,                     MAX(category_views.VIEW_COUNT) as PREFERRED_CATEGORY_VIEWS,                     -- 선호 시간대                     MAX(TO_CHAR(us.SESSION_START, 'HH24')) KEEP (DENSE_RANK FIRST ORDER BY hour_counts.HOUR_COUNT DESC) as PREFERRED_HOUR,                     MAX(TO_CHAR(us.SESSION_START, 'DAY')) KEEP (DENSE_RANK FIRST ORDER BY day_counts.DAY_COUNT DESC) as PREFERRED_DAY_OF_WEEK,                     -- 선호 디바이스                     MAX(us.DEVICE_TYPE) KEEP (DENSE_RANK FIRST ORDER BY device_counts.DEVICE_COUNT DESC) as PREFERRED_DEVICE_TYPE,                     ROUND(                         SUM(CASE WHEN us.DEVICE_TYPE = 'MOBILE' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                     ) as MOBILE_USAGE_RATE                   FROM USER_SESSIONS us,                        -- 주문이 있는 세션                        (SELECT DISTINCT us2.SESSION_ID, o.ORDER_ID                         FROM USER_SESSIONS us2, ORDERS o                         WHERE us2.USER_ID = o.USER_ID                         AND o.ORDERED_AT BETWEEN us2.SESSION_START AND NVL(us2.SESSION_END, us2.SESSION_START + 1)) order_sessions,                        -- 카테고리별 조회수                        (SELECT                            pv.USER_ID,                           c.CATEGORY_NAME,                           COUNT(*) as VIEW_COUNT                         FROM PRODUCT_VIEWS pv, PRODUCTS p, CATEGORIES c                         WHERE pv.PRODUCT_ID = p.PRODUCT_ID                         AND p.CATEGORY_ID = c.CATEGORY_ID                         GROUP BY pv.USER_ID, c.CATEGORY_NAME) category_views,                        -- 시간대별 카운트                        (SELECT USER_ID, TO_CHAR(SESSION_START, 'HH24') as SESSION_HOUR, COUNT(*) as HOUR_COUNT                         FROM USER_SESSIONS                         GROUP BY USER_ID, TO_CHAR(SESSION_START, 'HH24')) hour_counts,                        -- 요일별 카운트                        (SELECT USER_ID, TO_CHAR(SESSION_START, 'DAY') as SESSION_DAY, COUNT(*) as DAY_COUNT                         FROM USER_SESSIONS                         GROUP BY USER_ID, TO_CHAR(SESSION_START, 'DAY')) day_counts,                        -- 디바이스별 카운트                        (SELECT USER_ID, DEVICE_TYPE, COUNT(*) as DEVICE_COUNT                         FROM USER_SESSIONS                         GROUP BY USER_ID, DEVICE_TYPE) device_counts                   WHERE 1=1                                           AND us.SESSION_START >= TO_DATE(?, 'YYYY-MM-DD')                                                                 AND us.SESSION_START <= TO_DATE(?, 'YYYY-MM-DD')                                         AND us.SESSION_ID = order_sessions.SESSION_ID(+)                   AND us.USER_ID = category_views.USER_ID(+)                   AND us.USER_ID = hour_counts.USER_ID(+)                   AND TO_CHAR(us.SESSION_START, 'HH24') = hour_counts.SESSION_HOUR(+)                   AND us.USER_ID = day_counts.USER_ID(+)                   AND TO_CHAR(us.SESSION_START, 'DAY') = day_counts.SESSION_DAY(+)                   AND us.USER_ID = device_counts.USER_ID(+)                   AND us.DEVICE_TYPE = device_counts.DEVICE_TYPE(+)                   GROUP BY us.USER_ID) session_stats,                  (SELECT                      o.USER_ID,                     COUNT(*) as TOTAL_ORDERS,                     SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                     AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                     MAX(o.ORDERED_AT) as LAST_ORDER_DATE                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   AND o.ORDERED_AT BETWEEN TO_DATE(?, 'YYYY-MM-DD') AND TO_DATE(?, 'YYYY-MM-DD')                   GROUP BY o.USER_ID) order_stats             WHERE u.USER_ID = session_stats.USER_ID             AND u.USER_ID = order_stats.USER_ID(+)                                     ) behavior_data         ORDER BY ENGAGEMENT_SCORE DESC, CUSTOMER_VALUE_RANK\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"(\"\n  Position: 5625"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectProductRevenueAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 872\n### The error may exist in file:///tmp/mapper-8466481467992249471.xml\n### The error may involve amzn.bo.mapper.AnalyticsMapper.selectProductRevenueAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT * FROM (                     SELECT                          p.PRODUCT_ID,                         p.PRODUCT_NAME,                         p.BRAND,                         c.CATEGORY_NAME,                         SUM(oi.QUANTITY) as TOTAL_SOLD,                         SUM(oi.QUANTITY * oi.UNIT_PRICE) as TOTAL_REVENUE,                         AVG(oi.UNIT_PRICE) as AVG_SELLING_PRICE,                         COUNT(DISTINCT o.USER_ID) as UNIQUE_BUYERS,                         RANK() OVER (ORDER BY SUM(oi.QUANTITY * oi.UNIT_PRICE) DESC) as REVENUE_RANK                     FROM PRODUCTS p,                          ORDER_ITEMS oi,                          ORDERS o,                          CATEGORIES c                     WHERE p.PRODUCT_ID = oi.PRODUCT_ID                     AND oi.ORDER_ID = o.ORDER_ID                     AND p.CATEGORY_ID = c.CATEGORY_ID(+)                     AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                     GROUP BY p.PRODUCT_ID, p.PRODUCT_NAME, p.BRAND, c.CATEGORY_NAME                     ORDER BY TOTAL_REVENUE DESC                 )                                             WHERE ROWNUM <= ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 872"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectCustomerSegmentAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1276\n### The error may exist in file:///tmp/mapper-15195394673213542669.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              customer_segment,             COUNT(*) as CUSTOMER_COUNT,             SUM(total_spent) as TOTAL_REVENUE,             AVG(total_spent) as AVG_REVENUE_PER_CUSTOMER,             SUM(order_count) as TOTAL_ORDERS,             AVG(order_count) as AVG_ORDERS_PER_CUSTOMER,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as CUSTOMER_PERCENTAGE         FROM (             SELECT                  u.USER_ID,                 CASE                      WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 10000 THEN 'VIP'                     WHEN NVL(order_stats.TOTAL_SPENT, 0) >= 1000 THEN 'PREMIUM'                     WHEN NVL(order_stats.ORDER_COUNT, 0) > 0 THEN 'REGULAR'                     ELSE 'NEW'                 END as customer_segment,                 NVL(order_stats.TOTAL_SPENT, 0) as total_spent,                 NVL(order_stats.ORDER_COUNT, 0) as order_count             FROM USERS u,                  (SELECT                      o.USER_ID,                     COUNT(*) as ORDER_COUNT,                     SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o.USER_ID) order_stats             WHERE u.USER_ID = order_stats.USER_ID(+)         )         GROUP BY customer_segment         ORDER BY TOTAL_REVENUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1276"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectRegionalRevenueAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 536\n### The error may exist in file:///tmp/mapper-15935229183259070608.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              NVL(ua.COUNTRY, 'UNKNOWN') as COUNTRY,             NVL(ua.STATE, 'UNKNOWN') as STATE,             COUNT(DISTINCT o.ORDER_ID) as ORDER_COUNT,             SUM(o.TOTAL_AMOUNT) as TOTAL_REVENUE,             AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,             COUNT(DISTINCT o.USER_ID) as UNIQUE_CUSTOMERS,             ROUND(SUM(o.TOTAL_AMOUNT) * 100.0 / SUM(SUM(o.TOTAL_AMOUNT)) OVER(), 2) as REVENUE_PERCENTAGE         FROM ORDERS o,              USER_ADDRESSES ua         WHERE o.SHIPPING_ADDRESS_ID = ua.ADDRESS_ID(+)         AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')         GROUP BY NVL(ua.COUNTRY, 'UNKNOWN'), NVL(ua.STATE, 'UNKNOWN')         ORDER BY TOTAL_REVENUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 536"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectHourlyOrderPattern",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 402\n### The error may exist in file:///tmp/mapper-4328127803360209535.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              EXTRACT(HOUR FROM o.ORDERED_AT) as HOUR_OF_DAY,             COUNT(*) as ORDER_COUNT,             SUM(o.TOTAL_AMOUNT) as TOTAL_REVENUE,             AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as ORDER_PERCENTAGE         FROM ORDERS o         WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')         AND o.ORDERED_AT >= SYSDATE - 30         GROUP BY EXTRACT(HOUR FROM o.ORDERED_AT)         ORDER BY HOUR_OF_DAY\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 402"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectWeeklyOrderPattern",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 453\n### The error may exist in file:///tmp/mapper-12936852459366230139.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              TO_CHAR(o.ORDERED_AT, 'DAY') as DAY_OF_WEEK,             TO_CHAR(o.ORDERED_AT, 'D') as DAY_NUMBER,             COUNT(*) as ORDER_COUNT,             SUM(o.TOTAL_AMOUNT) as TOTAL_REVENUE,             AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as ORDER_PERCENTAGE         FROM ORDERS o         WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')         AND o.ORDERED_AT >= SYSDATE - 90         GROUP BY TO_CHAR(o.ORDERED_AT, 'DAY'), TO_CHAR(o.ORDERED_AT, 'D')         ORDER BY DAY_NUMBER\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 453"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectMonthlyGrowthRate",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: numeric = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 987\n### The error may exist in file:///tmp/mapper-10669173170901252903.xml\n### The error may involve amzn.bo.mapper.AnalyticsMapper.selectMonthlyGrowthRate-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              month_data.MONTH,             month_data.CURRENT_REVENUE,             month_data.PREVIOUS_REVENUE,             CASE                  WHEN month_data.PREVIOUS_REVENUE > 0 THEN                     ROUND(((month_data.CURRENT_REVENUE - month_data.PREVIOUS_REVENUE) / month_data.PREVIOUS_REVENUE) * 100, 2)                 ELSE 0             END as GROWTH_RATE_PERCENTAGE,             month_data.ORDER_COUNT,             month_data.UNIQUE_CUSTOMERS         FROM (             SELECT                  TO_CHAR(o.ORDERED_AT, 'YYYY-MM') as MONTH,                 SUM(o.TOTAL_AMOUNT) as CURRENT_REVENUE,                 LAG(SUM(o.TOTAL_AMOUNT)) OVER (ORDER BY TO_CHAR(o.ORDERED_AT, 'YYYY-MM')) as PREVIOUS_REVENUE,                 COUNT(*) as ORDER_COUNT,                 COUNT(DISTINCT o.USER_ID) as UNIQUE_CUSTOMERS             FROM ORDERS o             WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                               AND EXTRACT(YEAR FROM o.ORDERED_AT) = ?                           GROUP BY TO_CHAR(o.ORDERED_AT, 'YYYY-MM')         ) month_data         ORDER BY month_data.MONTH\n### Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: numeric = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 987"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectCohortAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 193\n### The error may exist in file:///tmp/mapper-4033297479695665986.xml\n### The error may involve amzn.bo.mapper.AnalyticsMapper.selectCohortAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              cohort_month,             period_number,             customers_count,             ROUND(customers_count * 100.0 / first_period_customers, 2) as RETENTION_RATE         FROM (             SELECT                  cohort_data.cohort_month,                 cohort_data.period_number,                 COUNT(DISTINCT cohort_data.USER_ID) as customers_count,                 FIRST_VALUE(COUNT(DISTINCT cohort_data.USER_ID)) OVER (                     PARTITION BY cohort_data.cohort_month                      ORDER BY cohort_data.period_number                      ROWS UNBOUNDED PRECEDING                 ) as first_period_customers             FROM (                 SELECT                      u.USER_ID,                     TO_CHAR(u.CREATED_AT, 'YYYY-MM') as cohort_month,                     MONTHS_BETWEEN(TRUNC(o.ORDERED_AT, 'MM'), TRUNC(u.CREATED_AT, 'MM')) as period_number                 FROM USERS u,                      ORDERS o                 WHERE u.USER_ID = o.USER_ID                 AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                                       AND u.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                           AND u.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                 ) cohort_data             GROUP BY cohort_data.cohort_month, cohort_data.period_number         )         ORDER BY cohort_month, period_number\n### Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 193"
  }, {
    "xmlFile" : "AnalyticsMapper.xml",
    "sqlId" : "selectRFMAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1940\n### The error may exist in file:///tmp/mapper-3219852937226229403.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              USER_ID,             EMAIL,             RECENCY_DAYS,             FREQUENCY_ORDERS,             MONETARY_VALUE,                           CASE                  WHEN RECENCY_SCORE >= 4 AND FREQUENCY_SCORE >= 4 AND MONETARY_SCORE >= 4 THEN 'Champions'                 WHEN RECENCY_SCORE >= 3 AND FREQUENCY_SCORE >= 3 AND MONETARY_SCORE >= 3 THEN 'Loyal Customers'                 WHEN RECENCY_SCORE >= 3 AND FREQUENCY_SCORE <= 2 AND MONETARY_SCORE >= 3 THEN 'Potential Loyalists'                 WHEN RECENCY_SCORE >= 4 AND FREQUENCY_SCORE <= 1 AND MONETARY_SCORE <= 1 THEN 'New Customers'                 WHEN RECENCY_SCORE <= 2 AND FREQUENCY_SCORE >= 3 AND MONETARY_SCORE >= 3 THEN 'At Risk'                 WHEN RECENCY_SCORE <= 2 AND FREQUENCY_SCORE <= 2 AND MONETARY_SCORE <= 2 THEN 'Lost Customers'                 ELSE 'Others'             END as RFM_SEGMENT                       FROM (             SELECT                  u.USER_ID,                 u.EMAIL,                 NVL(rfm_data.RECENCY_DAYS, 999) as RECENCY_DAYS,                 NVL(rfm_data.FREQUENCY_ORDERS, 0) as FREQUENCY_ORDERS,                 NVL(rfm_data.MONETARY_VALUE, 0) as MONETARY_VALUE,                 NTILE(5) OVER (ORDER BY NVL(rfm_data.RECENCY_DAYS, 999) DESC) as RECENCY_SCORE,                 NTILE(5) OVER (ORDER BY NVL(rfm_data.FREQUENCY_ORDERS, 0)) as FREQUENCY_SCORE,                 NTILE(5) OVER (ORDER BY NVL(rfm_data.MONETARY_VALUE, 0)) as MONETARY_SCORE             FROM USERS u,                  (SELECT                      o.USER_ID,                     TRUNC(SYSDATE) - TRUNC(MAX(o.ORDERED_AT)) as RECENCY_DAYS,                     COUNT(*) as FREQUENCY_ORDERS,                     SUM(o.TOTAL_AMOUNT) as MONETARY_VALUE                   FROM ORDERS o                   WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o.USER_ID) rfm_data             WHERE u.USER_ID = rfm_data.USER_ID(+)         )         ORDER BY MONETARY_VALUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1940"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderListWithAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 3666\n### The error may exist in file:///tmp/mapper-10116146885013399134.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderListWithAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT * FROM (             SELECT                  o.ORDER_ID,                 o.ORDER_NUMBER,                 o.USER_ID,                 u.EMAIL as USER_EMAIL,                 u.FIRST_NAME || ' ' || u.LAST_NAME as USER_NAME,                 o.ORDER_STATUS,                 o.TOTAL_AMOUNT,                 o.CURRENCY,                 o.PAYMENT_METHOD,                 o.ORDERED_AT,                 o.SHIPPED_AT,                 o.DELIVERED_AT,                 order_details.ITEM_COUNT,                 order_details.UNIQUE_PRODUCTS,                 order_details.AVG_ITEM_PRICE,                 order_details.DISCOUNT_PERCENTAGE,                 -- 주문 처리 시간 분석                 CASE                      WHEN o.SHIPPED_AT IS NOT NULL                      THEN ROUND(EXTRACT(DAY FROM (o.SHIPPED_AT - o.ORDERED_AT)) * 24 + EXTRACT(HOUR FROM (o.SHIPPED_AT - o.ORDERED_AT)), 2)                     ELSE NULL                 END as HOURS_TO_SHIP,                 CASE                      WHEN o.DELIVERED_AT IS NOT NULL                      THEN ROUND(EXTRACT(DAY FROM (o.DELIVERED_AT - o.ORDERED_AT)) * 24 + EXTRACT(HOUR FROM (o.DELIVERED_AT - o.ORDERED_AT)), 2)                     ELSE NULL                 END as HOURS_TO_DELIVER,                 -- 고객 주문 패턴 분석                 customer_stats.CUSTOMER_ORDER_COUNT,                 customer_stats.CUSTOMER_TOTAL_SPENT,                 customer_stats.CUSTOMER_AVG_ORDER_VALUE,                 DENSE_RANK() OVER (PARTITION BY u.USER_ID ORDER BY o.ORDERED_AT) as CUSTOMER_ORDER_SEQUENCE,                 -- 주문 가치 분석                 CASE                      WHEN o.TOTAL_AMOUNT >= 500 THEN 'HIGH_VALUE'                     WHEN o.TOTAL_AMOUNT >= 100 THEN 'MEDIUM_VALUE'                     ELSE 'LOW_VALUE'                 END as ORDER_VALUE_CATEGORY,                 -- 계절성 분석                 TO_CHAR(o.ORDERED_AT, 'Q') as ORDER_QUARTER,                 TO_CHAR(o.ORDERED_AT, 'MM') as ORDER_MONTH,                 TO_CHAR(o.ORDERED_AT, 'D') as ORDER_DAY_OF_WEEK,                 -- 지역 정보                 NVL(shipping_addr.COUNTRY, 'UNKNOWN') as SHIPPING_COUNTRY,                 NVL(shipping_addr.STATE, 'UNKNOWN') as SHIPPING_STATE,                 -- 주문 복잡도 점수                 (order_details.UNIQUE_PRODUCTS * 0.3 +                   order_details.ITEM_COUNT * 0.2 +                   CASE WHEN o.DISCOUNT_AMOUNT > 0 THEN 10 ELSE 0 END +                  CASE WHEN shipping_addr.COUNTRY != 'US' THEN 15 ELSE 0 END) as COMPLEXITY_SCORE,                 ROW_NUMBER() OVER (ORDER BY o.ORDERED_AT DESC) as RN             FROM ORDERS o,                  USERS u,                  USER_ADDRESSES shipping_addr,                  (SELECT                      oi.ORDER_ID,                     COUNT(*) as ITEM_COUNT,                     COUNT(DISTINCT oi.PRODUCT_ID) as UNIQUE_PRODUCTS,                     AVG(oi.UNIT_PRICE) as AVG_ITEM_PRICE,                     ROUND(MAX(o2.DISCOUNT_AMOUNT) / NULLIF(MAX(o2.SUBTOTAL), 0) * 100, 2) as DISCOUNT_PERCENTAGE                   FROM ORDER_ITEMS oi, ORDERS o2                   WHERE oi.ORDER_ID = o2.ORDER_ID                   GROUP BY oi.ORDER_ID) order_details,                  (SELECT                      o3.USER_ID,                     COUNT(*) as CUSTOMER_ORDER_COUNT,                     SUM(o3.TOTAL_AMOUNT) as CUSTOMER_TOTAL_SPENT,                     AVG(o3.TOTAL_AMOUNT) as CUSTOMER_AVG_ORDER_VALUE                   FROM ORDERS o3                   WHERE o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   GROUP BY o3.USER_ID) customer_stats             WHERE o.USER_ID = u.USER_ID             AND o.SHIPPING_ADDRESS_ID = shipping_addr.ADDRESS_ID(+)             AND o.ORDER_ID = order_details.ORDER_ID(+)             AND o.USER_ID = customer_stats.USER_ID(+)                               AND UPPER(o.ORDER_NUMBER) LIKE '%' || UPPER(?) || '%'                                             AND UPPER(u.EMAIL) LIKE '%' || UPPER(?) || '%'                                             AND o.ORDER_STATUS = ?                                             AND o.PAYMENT_METHOD = ?                                                           AND NVL(shipping_addr.COUNTRY, 'UNKNOWN') = ?                                               AND o.ORDERED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                 AND o.ORDERED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                                 AND o.TOTAL_AMOUNT >= ?                                                 AND o.TOTAL_AMOUNT <= ?                         )                         WHERE ROWNUM <= ? + ?                 AND RN > ?                     ORDER BY ORDERED_AT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 3666"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderProcessingTimeAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1296\n### The error may exist in file:///tmp/mapper-13190303229895152506.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderProcessingTimeAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              o.ORDER_STATUS,             o.PAYMENT_METHOD,             NVL(ua.COUNTRY, 'UNKNOWN') as SHIPPING_COUNTRY,             COUNT(*) as ORDER_COUNT,             AVG(CASE WHEN o.SHIPPED_AT IS NOT NULL                  THEN EXTRACT(DAY FROM (o.SHIPPED_AT - o.ORDERED_AT)) * 24 +                       EXTRACT(HOUR FROM (o.SHIPPED_AT - o.ORDERED_AT))                 ELSE NULL END) as AVG_PROCESSING_HOURS,             MIN(CASE WHEN o.SHIPPED_AT IS NOT NULL                  THEN EXTRACT(DAY FROM (o.SHIPPED_AT - o.ORDERED_AT)) * 24 +                       EXTRACT(HOUR FROM (o.SHIPPED_AT - o.ORDERED_AT))                 ELSE NULL END) as MIN_PROCESSING_HOURS,             MAX(CASE WHEN o.SHIPPED_AT IS NOT NULL                  THEN EXTRACT(DAY FROM (o.SHIPPED_AT - o.ORDERED_AT)) * 24 +                       EXTRACT(HOUR FROM (o.SHIPPED_AT - o.ORDERED_AT))                 ELSE NULL END) as MAX_PROCESSING_HOURS,             MEDIAN(CASE WHEN o.SHIPPED_AT IS NOT NULL                  THEN EXTRACT(DAY FROM (o.SHIPPED_AT - o.ORDERED_AT)) * 24 +                       EXTRACT(HOUR FROM (o.SHIPPED_AT - o.ORDERED_AT))                 ELSE NULL END) as MEDIAN_PROCESSING_HOURS         FROM ORDERS o,              USER_ADDRESSES ua         WHERE o.SHIPPING_ADDRESS_ID = ua.ADDRESS_ID(+)         AND o.ORDER_STATUS IN ('SHIPPED', 'DELIVERED')         GROUP BY o.ORDER_STATUS, o.PAYMENT_METHOD, NVL(ua.COUNTRY, 'UNKNOWN')         ORDER BY AVG_PROCESSING_HOURS DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1296"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectCustomerOrderPatternAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 3413\n### The error may exist in file:///tmp/mapper-12730372853711972976.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectCustomerOrderPatternAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              u.USER_ID,             u.EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as FULL_NAME,             u.CREATED_AT as REGISTRATION_DATE,             pattern_stats.FIRST_ORDER_DATE,             pattern_stats.LAST_ORDER_DATE,             pattern_stats.TOTAL_ORDERS,             pattern_stats.TOTAL_SPENT,             pattern_stats.AVG_ORDER_VALUE,             pattern_stats.DAYS_BETWEEN_ORDERS,             pattern_stats.ORDER_FREQUENCY_SCORE,             pattern_stats.SPENDING_CONSISTENCY_SCORE,             pattern_stats.PREFERRED_PAYMENT_METHOD,             pattern_stats.PREFERRED_ORDER_DAY,             pattern_stats.PREFERRED_ORDER_HOUR,             pattern_stats.SEASONAL_PREFERENCE,             pattern_stats.CATEGORY_DIVERSITY_SCORE,             pattern_stats.RETURN_RATE,             -- RFM 분석             rfm_scores.RECENCY_SCORE,             rfm_scores.FREQUENCY_SCORE,             rfm_scores.MONETARY_SCORE,             rfm_scores.RFM_SEGMENT,             -- 고객 생명주기 가치             pattern_stats.PREDICTED_CLV,             -- 이탈 위험도             pattern_stats.CHURN_RISK_SCORE,             RANK() OVER (ORDER BY pattern_stats.TOTAL_SPENT DESC) as CUSTOMER_VALUE_RANK         FROM USERS u,              -- 기본 패턴 통계 (단순화된 날짜 계산)              (SELECT                  o.USER_ID,                 MIN(o.ORDERED_AT) as FIRST_ORDER_DATE,                 MAX(o.ORDERED_AT) as LAST_ORDER_DATE,                 COUNT(*) as TOTAL_ORDERS,                 SUM(o.TOTAL_AMOUNT) as TOTAL_SPENT,                 AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,                 -- 단순화된 주문 간격 계산 (전체 기간을 주문 수로 나누기)                                   CASE                      WHEN COUNT(*) > 1 THEN                          ROUND((EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                 EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1))                     ELSE NULL                 END as DAYS_BETWEEN_ORDERS,                                   -- 주문 빈도 점수 (단순화)                                   CASE                      WHEN COUNT(*) > 1 AND (EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                             EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1) <= 30 THEN 100                     WHEN COUNT(*) > 1 AND (EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                             EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1) <= 60 THEN 80                     WHEN COUNT(*) > 1 AND (EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                             EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1) <= 90 THEN 60                     WHEN COUNT(*) > 1 AND (EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                             EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1) <= 180 THEN 40                     ELSE 20                 END as ORDER_FREQUENCY_SCORE,                                   -- 지출 일관성 점수 (변동계수의 역수)                 ROUND(100 / (1 + STDDEV(o.TOTAL_AMOUNT) / NULLIF(AVG(o.TOTAL_AMOUNT), 0)), 2) as SPENDING_CONSISTENCY_SCORE,                 -- 선호 결제 수단 (가장 많이 사용한 것)                 (SELECT PAYMENT_METHOD                   FROM (SELECT PAYMENT_METHOD, COUNT(*) as cnt                        FROM ORDERS o3                         WHERE o3.USER_ID = o.USER_ID                         AND o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                        GROUP BY PAYMENT_METHOD                        ORDER BY cnt DESC)                  WHERE ROWNUM = 1) as PREFERRED_PAYMENT_METHOD,                 -- 선호 주문 요일                 (SELECT ORDER_DAY                   FROM (SELECT TO_CHAR(ORDERED_AT, 'DAY') as ORDER_DAY, COUNT(*) as cnt                        FROM ORDERS o3                         WHERE o3.USER_ID = o.USER_ID                         AND o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                        GROUP BY TO_CHAR(ORDERED_AT, 'DAY')                        ORDER BY cnt DESC)                  WHERE ROWNUM = 1) as PREFERRED_ORDER_DAY,                 -- 선호 주문 시간대                 (SELECT ORDER_HOUR                   FROM (SELECT TO_CHAR(ORDERED_AT, 'HH24') as ORDER_HOUR, COUNT(*) as cnt                        FROM ORDERS o3                         WHERE o3.USER_ID = o.USER_ID                         AND o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                        GROUP BY TO_CHAR(ORDERED_AT, 'HH24')                        ORDER BY cnt DESC)                  WHERE ROWNUM = 1) as PREFERRED_ORDER_HOUR,                 -- 계절 선호도                 (SELECT ORDER_QUARTER                   FROM (SELECT TO_CHAR(ORDERED_AT, 'Q') as ORDER_QUARTER, COUNT(*) as cnt                        FROM ORDERS o3                         WHERE o3.USER_ID = o.USER_ID                         AND o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                        GROUP BY TO_CHAR(ORDERED_AT, 'Q')                        ORDER BY cnt DESC)                  WHERE ROWNUM = 1) as SEASONAL_PREFERENCE,                 -- 카테고리 다양성 점수                 NVL((SELECT COUNT(DISTINCT p.CATEGORY_ID) * 10                      FROM ORDERS o2, ORDER_ITEMS oi, PRODUCTS p                      WHERE o2.ORDER_ID = oi.ORDER_ID                      AND oi.PRODUCT_ID = p.PRODUCT_ID                      AND o2.USER_ID = o.USER_ID                      AND o2.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')), 0) as CATEGORY_DIVERSITY_SCORE,                 -- 반품률 (단순화)                 0 as RETURN_RATE,                 -- 예상 고객 생명주기 가치 (단순화)                                   CASE                      WHEN COUNT(*) > 1 THEN                         ROUND(SUM(o.TOTAL_AMOUNT) *                                (365 / NULLIF((EXTRACT(DAY FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) +                                              EXTRACT(HOUR FROM (MAX(o.ORDERED_AT) - MIN(o.ORDERED_AT))) / 24) / (COUNT(*) - 1), 0)) *                                2, 2)                     ELSE SUM(o.TOTAL_AMOUNT) * 2                 END as PREDICTED_CLV,                                   -- 이탈 위험 점수                                   CASE                      WHEN (EXTRACT(DAY FROM (SYSDATE - MAX(o.ORDERED_AT))) +                            EXTRACT(HOUR FROM (SYSDATE - MAX(o.ORDERED_AT))) / 24) > 365 THEN 90                     WHEN (EXTRACT(DAY FROM (SYSDATE - MAX(o.ORDERED_AT))) +                            EXTRACT(HOUR FROM (SYSDATE - MAX(o.ORDERED_AT))) / 24) > 180 THEN 70                     WHEN (EXTRACT(DAY FROM (SYSDATE - MAX(o.ORDERED_AT))) +                            EXTRACT(HOUR FROM (SYSDATE - MAX(o.ORDERED_AT))) / 24) > 90 THEN 50                     WHEN STDDEV(o.TOTAL_AMOUNT) / NULLIF(AVG(o.TOTAL_AMOUNT), 0) > 1 THEN 60                     ELSE 20                 END as CHURN_RISK_SCORE                                 FROM ORDERS o               WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                                   AND o.ORDERED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                     AND o.ORDERED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                 GROUP BY o.USER_ID) pattern_stats,              -- RFM 점수 계산 (별도 서브쿼리)              (SELECT                  base_data.USER_ID,                 NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) as RECENCY_SCORE,                 NTILE(5) OVER (ORDER BY base_data.FREQUENCY_COUNT) as FREQUENCY_SCORE,                 NTILE(5) OVER (ORDER BY base_data.MONETARY_AMOUNT) as MONETARY_SCORE,                                   CASE                      WHEN NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) >= 4                           AND NTILE(5) OVER (ORDER BY base_data.FREQUENCY_COUNT) >= 4                           AND NTILE(5) OVER (ORDER BY base_data.MONETARY_AMOUNT) >= 4 THEN 'CHAMPIONS'                     WHEN NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) >= 3                           AND NTILE(5) OVER (ORDER BY base_data.FREQUENCY_COUNT) >= 3                           AND NTILE(5) OVER (ORDER BY base_data.MONETARY_AMOUNT) >= 3 THEN 'LOYAL_CUSTOMERS'                     WHEN NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) >= 4                           AND NTILE(5) OVER (ORDER BY base_data.MONETARY_AMOUNT) >= 4 THEN 'POTENTIAL_LOYALISTS'                     WHEN NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) >= 4 THEN 'NEW_CUSTOMERS'                     WHEN NTILE(5) OVER (ORDER BY base_data.FREQUENCY_COUNT) >= 3                           AND NTILE(5) OVER (ORDER BY base_data.MONETARY_AMOUNT) >= 3 THEN 'AT_RISK'                     WHEN NTILE(5) OVER (ORDER BY base_data.RECENCY_DAYS DESC) <= 2 THEN 'HIBERNATING'                     ELSE 'OTHERS'                 END as RFM_SEGMENT                                 FROM (SELECT                        o.USER_ID,                       (EXTRACT(DAY FROM (SYSDATE - MAX(o.ORDERED_AT))) +                         EXTRACT(HOUR FROM (SYSDATE - MAX(o.ORDERED_AT))) / 24) as RECENCY_DAYS,                       COUNT(*) as FREQUENCY_COUNT,                       SUM(o.TOTAL_AMOUNT) as MONETARY_AMOUNT                     FROM ORDERS o                     WHERE o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                                               AND o.ORDERED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                                       AND o.ORDERED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                             GROUP BY o.USER_ID) base_data) rfm_scores         WHERE u.USER_ID = pattern_stats.USER_ID         AND u.USER_ID = rfm_scores.USER_ID                                       ORDER BY CUSTOMER_VALUE_RANK\n### Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 3413"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderCount",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 98\n### The error may exist in file:///tmp/mapper-1924656857688760731.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderCount-Inline\n### The error occurred while setting parameters\n### SQL: SELECT COUNT(*)         FROM ORDERS o,              USERS u         WHERE o.USER_ID = u.USER_ID(+)         AND 1=1                                                           AND o.PAYMENT_METHOD = ?                                               AND o.TOTAL_AMOUNT >= ?                                                 AND o.TOTAL_AMOUNT <= ?                                                                 AND o.ORDERED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                                                 AND o.ORDERED_AT <= TO_DATE(?, 'YYYY-MM-DD') + 1\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 98"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderDetail",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 708\n### The error may exist in file:///tmp/mapper-5347076226672890508.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderDetail-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              o.ORDER_ID,             o.ORDER_NUMBER,             o.USER_ID,             u.EMAIL as USER_EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as USER_NAME,             o.ORDER_STATUS,             o.TOTAL_AMOUNT,             o.CURRENCY,             o.PAYMENT_METHOD,             TO_CHAR(o.ORDERED_AT, 'YYYY-MM-DD HH24:MI:SS') as ORDERED_AT,             TO_CHAR(o.SHIPPED_AT, 'YYYY-MM-DD HH24:MI:SS') as SHIPPED_AT,             TO_CHAR(o.DELIVERED_AT, 'YYYY-MM-DD HH24:MI:SS') as DELIVERED_AT,             o.SUBTOTAL,             o.TAX_AMOUNT,             o.SHIPPING_AMOUNT,             o.DISCOUNT_AMOUNT         FROM ORDERS o,              USERS u         WHERE o.USER_ID = u.USER_ID(+)         AND o.ORDER_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 708"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderItems",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 366\n### The error may exist in file:///tmp/mapper-4035931468857983066.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderItems-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              oi.ORDER_ITEM_ID,             oi.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.BRAND,             oi.QUANTITY,             oi.UNIT_PRICE,             oi.TOTAL_PRICE,             c.CATEGORY_NAME         FROM ORDER_ITEMS oi,              PRODUCTS p,              CATEGORIES c         WHERE oi.PRODUCT_ID = p.PRODUCT_ID(+)         AND p.CATEGORY_ID = c.CATEGORY_ID(+)         AND oi.ORDER_ID = ?         ORDER BY oi.ORDER_ITEM_ID\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 366"
  }, {
    "xmlFile" : "OrderMapper.xml",
    "sqlId" : "selectOrderShippingInfo",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1282\n### The error may exist in file:///tmp/mapper-10666760499142276827.xml\n### The error may involve amzn.bo.mapper.OrderMapper.selectOrderShippingInfo-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              o.ORDER_ID,             o.ORDER_NUMBER,             o.ORDER_STATUS,             TO_CHAR(o.ORDERED_AT, 'YYYY-MM-DD HH24:MI:SS') as ORDERED_AT,             TO_CHAR(o.SHIPPED_AT, 'YYYY-MM-DD HH24:MI:SS') as SHIPPED_AT,             TO_CHAR(o.DELIVERED_AT, 'YYYY-MM-DD HH24:MI:SS') as DELIVERED_AT,             u.EMAIL as USER_EMAIL,             CONCAT(CONCAT(u.FIRST_NAME, ' '), u.LAST_NAME) as USER_NAME,             s.TRACKING_NUMBER,             s.SHIPPING_CARRIER,             s.SHIPPING_METHOD,             s.SHIPPING_ADDRESS,             s.SHIPPING_COST,             TO_CHAR(s.SHIPPED_DATE, 'YYYY-MM-DD HH24:MI:SS') as SHIPMENT_SHIPPED_DATE,             TO_CHAR(s.ESTIMATED_DELIVERY_DATE, 'YYYY-MM-DD HH24:MI:SS') as ESTIMATED_DELIVERY_DATE,             TO_CHAR(s.ACTUAL_DELIVERY_DATE, 'YYYY-MM-DD HH24:MI:SS') as ACTUAL_DELIVERY_DATE,             s.SHIPMENT_STATUS,             CASE                  WHEN o.ORDER_STATUS = 'DELIVERED' THEN 'DELIVERED'                 WHEN o.ORDER_STATUS = 'SHIPPED' THEN 'IN_TRANSIT'                 WHEN o.ORDER_STATUS = 'PROCESSING' THEN 'PREPARING'                 ELSE 'PENDING'             END as SHIPPING_STATUS         FROM ORDERS o,              USERS u,              SHIPMENTS s         WHERE o.USER_ID = u.USER_ID(+)         AND o.ORDER_ID = s.ORDER_ID(+)         AND o.ORDER_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1282"
  }, {
    "xmlFile" : "ShippingMapper.xml",
    "sqlId" : "selectShippingPerformanceAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: function nvl(numeric, integer) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 779\n### The error may exist in file:///tmp/mapper-6886296283741646737.xml\n### The error may involve amzn.bo.mapper.ShippingMapper.selectShippingPerformanceAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              s.SHIPPING_METHOD,             s.SHIPPING_CARRIER as CARRIER,             COUNT(DISTINCT s.SHIPMENT_ID) as TOTAL_SHIPMENTS,             COUNT(CASE WHEN s.SHIPMENT_STATUS = 'DELIVERED' THEN 1 END) as DELIVERED_COUNT,             COUNT(CASE WHEN s.SHIPMENT_STATUS = 'IN_TRANSIT' THEN 1 END) as IN_TRANSIT_COUNT,             COUNT(CASE WHEN s.SHIPMENT_STATUS = 'DELAYED' THEN 1 END) as DELAYED_COUNT,             ROUND(COUNT(CASE WHEN s.SHIPMENT_STATUS = 'DELIVERED' THEN 1 END) * 100.0 / COUNT(*), 2) as DELIVERY_SUCCESS_RATE,             ROUND(AVG(CASE WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.SHIPPED_DATE IS NOT NULL                  THEN (CAST(s.ACTUAL_DELIVERY_DATE AS DATE) - CAST(s.SHIPPED_DATE AS DATE)) END), 2) as AVG_DELIVERY_DAYS,             NVL(SUM(s.SHIPPING_COST), 0) as TOTAL_SHIPPING_COST,             ROUND(NVL(AVG(s.SHIPPING_COST), 0), 2) as AVG_SHIPPING_COST         FROM SHIPMENTS s         WHERE s.CREATED_AT >= SYSDATE - 30         GROUP BY s.SHIPPING_METHOD, s.SHIPPING_CARRIER         ORDER BY DELIVERY_SUCCESS_RATE DESC, TOTAL_SHIPMENTS DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: function nvl(numeric, integer) does not exist\n  Hint: No function matches the given name and argument types. You might need to add explicit type casts.\n  Position: 779"
  }, {
    "xmlFile" : "ShippingMapper.xml",
    "sqlId" : "selectShippingDelayPatternAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 710\n### The error may exist in file:///tmp/mapper-18064836206498286961.xml\n### The error may involve amzn.bo.mapper.ShippingMapper.selectShippingDelayPatternAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              delay_reason,             shipping_method,             carrier,             COUNT(*) as DELAY_COUNT,             ROUND(AVG(delay_days), 2) as AVG_DELAY_DAYS,             MIN(delay_days) as MIN_DELAY_DAYS,             MAX(delay_days) as MAX_DELAY_DAYS,             COUNT(CASE WHEN EXTRACT(HOUR FROM created_at) BETWEEN 0 AND 5 THEN 1 END) as NIGHT_DELAYS,             COUNT(CASE WHEN EXTRACT(HOUR FROM created_at) BETWEEN 6 AND 11 THEN 1 END) as MORNING_DELAYS,             COUNT(CASE WHEN EXTRACT(HOUR FROM created_at) BETWEEN 12 AND 17 THEN 1 END) as AFTERNOON_DELAYS,             COUNT(CASE WHEN EXTRACT(HOUR FROM created_at) BETWEEN 18 AND 23 THEN 1 END) as EVENING_DELAYS         FROM (             SELECT                  s.SHIPPING_METHOD,                 s.SHIPPING_CARRIER as carrier,                 s.CREATED_AT,                 CASE                      WHEN s.SHIPMENT_STATUS = 'DELAYED' THEN 'CARRIER_DELAY'                     WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.ESTIMATED_DELIVERY_DATE IS NOT NULL                           AND CAST(s.ACTUAL_DELIVERY_DATE AS DATE) > CAST(s.ESTIMATED_DELIVERY_DATE AS DATE) THEN 'LATE_DELIVERY'                     WHEN s.SHIPPED_DATE IS NOT NULL AND s.CREATED_AT IS NOT NULL                           AND (CAST(s.SHIPPED_DATE AS DATE) - CAST(s.CREATED_AT AS DATE)) > 2 THEN 'PROCESSING_DELAY'                     ELSE 'OTHER_DELAY'                 END as delay_reason,                 CASE                      WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.ESTIMATED_DELIVERY_DATE IS NOT NULL                      THEN CAST(s.ACTUAL_DELIVERY_DATE AS DATE) - CAST(s.ESTIMATED_DELIVERY_DATE AS DATE)                     WHEN s.SHIPPED_DATE IS NOT NULL AND s.CREATED_AT IS NOT NULL                      THEN CAST(s.SHIPPED_DATE AS DATE) - CAST(s.CREATED_AT AS DATE)                     ELSE 1                 END as delay_days             FROM SHIPMENTS s             WHERE (s.SHIPMENT_STATUS = 'DELAYED'                     OR (s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.ESTIMATED_DELIVERY_DATE IS NOT NULL                         AND CAST(s.ACTUAL_DELIVERY_DATE AS DATE) > CAST(s.ESTIMATED_DELIVERY_DATE AS DATE))                    OR (s.SHIPPED_DATE IS NOT NULL AND s.CREATED_AT IS NOT NULL                         AND (CAST(s.SHIPPED_DATE AS DATE) - CAST(s.CREATED_AT AS DATE)) > 2))             AND s.CREATED_AT >= SYSDATE - 30         )         GROUP BY delay_reason, shipping_method, carrier         ORDER BY DELAY_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 710"
  }, {
    "xmlFile" : "ShippingMapper.xml",
    "sqlId" : "selectShippingRouteOptimizationAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1664\n### The error may exist in file:///tmp/mapper-15822839020782442337.xml\n### The error may involve amzn.bo.mapper.ShippingMapper.selectShippingRouteOptimizationAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              'ALL_REGIONS' as origin_region,             'ALL_DESTINATIONS' as destination_region,             s.SHIPPING_METHOD,             COUNT(*) as SHIPMENT_COUNT,             100 as AVG_DISTANCE_KM,             ROUND(AVG(CASE WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.SHIPPED_DATE IS NOT NULL                  THEN (CAST(s.ACTUAL_DELIVERY_DATE AS DATE) - CAST(s.SHIPPED_DATE AS DATE)) END), 2) as AVG_DELIVERY_DAYS,             ROUND(AVG(s.SHIPPING_COST), 2) as AVG_SHIPPING_COST,             ROUND(AVG(s.SHIPPING_COST / 100), 4) as COST_PER_KM,             COUNT(CASE WHEN (CASE WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.SHIPPED_DATE IS NOT NULL                  THEN (CAST(s.ACTUAL_DELIVERY_DATE AS DATE) - CAST(s.SHIPPED_DATE AS DATE)) ELSE 999 END) <=                  (CASE WHEN s.SHIPPING_METHOD = 'EXPRESS' THEN 1 WHEN s.SHIPPING_METHOD = 'STANDARD' THEN 3 ELSE 5 END) THEN 1 END) as ON_TIME_DELIVERIES,             ROUND(COUNT(CASE WHEN (CASE WHEN s.ACTUAL_DELIVERY_DATE IS NOT NULL AND s.SHIPPED_DATE IS NOT NULL                  THEN (CAST(s.ACTUAL_DELIVERY_DATE AS DATE) - CAST(s.SHIPPED_DATE AS DATE)) ELSE 999 END) <=                  (CASE WHEN s.SHIPPING_METHOD = 'EXPRESS' THEN 1 WHEN s.SHIPPING_METHOD = 'STANDARD' THEN 3 ELSE 5 END) THEN 1 END) * 100.0 / COUNT(*), 2) as ON_TIME_RATE,             CASE                  WHEN AVG(s.SHIPPING_COST / 100) <= 0.5 THEN 'COST_EFFICIENT'                 WHEN AVG(s.SHIPPING_COST / 100) <= 1.0 THEN 'MODERATE_COST'                 ELSE 'HIGH_COST'             END as COST_EFFICIENCY         FROM SHIPMENTS s         WHERE s.SHIPMENT_STATUS = 'DELIVERED'         AND s.CREATED_AT >= SYSDATE - 30         GROUP BY s.SHIPPING_METHOD         HAVING COUNT(*) >= 5         ORDER BY SHIPMENT_COUNT DESC, ON_TIME_RATE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 1664"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentAnalyticsDashboard",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1038\n### The error may exist in file:///tmp/mapper-15469347222744560874.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentAnalyticsDashboard-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              payment_method,             payment_status,             country,             COUNT(*) as TRANSACTION_COUNT,             SUM(amount) as TOTAL_AMOUNT,             AVG(amount) as AVG_TRANSACTION_AMOUNT,             ROUND(SUM(CASE WHEN payment_status = 'COMPLETED' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as SUCCESS_RATE,             ROUND(SUM(CASE WHEN payment_status = 'FAILED' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as FAILURE_RATE,             GROUPING(payment_method) as METHOD_GROUPING,             GROUPING(payment_status) as STATUS_GROUPING,             GROUPING(country) as COUNTRY_GROUPING         FROM (             SELECT                  p.PAYMENT_METHOD as payment_method,                 p.PAYMENT_STATUS as payment_status,                 p.AMOUNT as amount,                 NVL(ua.COUNTRY, 'UNKNOWN') as country             FROM PAYMENTS p,                  ORDERS o,                  USER_ADDRESSES ua             WHERE p.ORDER_ID = o.ORDER_ID             AND o.BILLING_ADDRESS_ID = ua.ADDRESS_ID(+)         )         GROUP BY ROLLUP(payment_method, payment_status, country)         ORDER BY GROUPING(payment_method), GROUPING(payment_status), GROUPING(country), TOTAL_AMOUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1038"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentFailurePatternAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 521\n### The error may exist in file:///tmp/mapper-7874695470410214341.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentFailurePatternAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PAYMENT_METHOD,             'UNKNOWN' as FAILURE_REASON,             NVL(ua.COUNTRY, 'UNKNOWN') as COUNTRY,             COUNT(*) as FAILURE_COUNT,             SUM(p.AMOUNT) as TOTAL_FAILURE_AMOUNT,             AVG(p.AMOUNT) as AVG_FAILURE_AMOUNT,             ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as FAILURE_PERCENTAGE         FROM PAYMENTS p,              ORDERS o,              USER_ADDRESSES ua         WHERE p.ORDER_ID = o.ORDER_ID         AND o.BILLING_ADDRESS_ID = ua.ADDRESS_ID(+)         AND p.PAYMENT_STATUS = 'FAILED'         GROUP BY p.PAYMENT_METHOD, NVL(ua.COUNTRY, 'UNKNOWN')         ORDER BY FAILURE_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 521"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentMethodPerformanceAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 4021\n### The error may exist in file:///tmp/mapper-7568025231503793553.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentMethodPerformanceAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              PAYMENT_METHOD,             TOTAL_TRANSACTIONS,             SUCCESSFUL_TRANSACTIONS,             FAILED_TRANSACTIONS,             TOTAL_AMOUNT,             SUCCESSFUL_AMOUNT,             AVG_TRANSACTION_AMOUNT,             SUCCESS_RATE,             FAILURE_RATE,             AVG_PROCESSING_TIME_MINUTES,             -- 성과 등급             DECODE(                 GREATEST(                     CASE WHEN SUCCESS_RATE >= 95 THEN 4 ELSE 0 END,                     CASE WHEN AVG_PROCESSING_TIME_MINUTES <= 2 THEN 3 ELSE 0 END,                     CASE WHEN TOTAL_AMOUNT >= 100000 THEN 2 ELSE 0 END,                     CASE WHEN TOTAL_TRANSACTIONS >= 1000 THEN 1 ELSE 0 END                 ),                 4, 'EXCELLENT',                 3, 'VERY_GOOD',                  2, 'GOOD',                 1, 'AVERAGE',                 'NEEDS_IMPROVEMENT'             ) as PERFORMANCE_GRADE,             -- 시간대별 선호도 분석             MORNING_USAGE_RATE,             AFTERNOON_USAGE_RATE,             EVENING_USAGE_RATE,             NIGHT_USAGE_RATE,             -- 요일별 선호도             WEEKDAY_USAGE_RATE,             WEEKEND_USAGE_RATE,             -- 지역별 선호도 (상위 3개국)             TOP_COUNTRY_1,             TOP_COUNTRY_1_RATE,             TOP_COUNTRY_2,             TOP_COUNTRY_2_RATE,             TOP_COUNTRY_3,             TOP_COUNTRY_3_RATE,             -- 월별 성장률             MONTHLY_GROWTH_RATE,             -- 경쟁력 지수             ROUND(                 (SUCCESS_RATE * 0.4 +                   (100 - LEAST(AVG_PROCESSING_TIME_MINUTES, 10)) * 10 * 0.3 +                  LEAST(TOTAL_AMOUNT / 10000, 100) * 0.3), 2             ) as COMPETITIVENESS_INDEX,             RANK() OVER (ORDER BY SUCCESS_RATE DESC, AVG_PROCESSING_TIME_MINUTES ASC) as OVERALL_RANK         FROM (             SELECT                  p.PAYMENT_METHOD,                 COUNT(*) as TOTAL_TRANSACTIONS,                 SUM(CASE WHEN p.PAYMENT_STATUS = 'COMPLETED' THEN 1 ELSE 0 END) as SUCCESSFUL_TRANSACTIONS,                 SUM(CASE WHEN p.PAYMENT_STATUS = 'FAILED' THEN 1 ELSE 0 END) as FAILED_TRANSACTIONS,                 SUM(p.AMOUNT) as TOTAL_AMOUNT,                 SUM(CASE WHEN p.PAYMENT_STATUS = 'COMPLETED' THEN p.AMOUNT ELSE 0 END) as SUCCESSFUL_AMOUNT,                 AVG(p.AMOUNT) as AVG_TRANSACTION_AMOUNT,                 ROUND(                     SUM(CASE WHEN p.PAYMENT_STATUS = 'COMPLETED' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as SUCCESS_RATE,                 ROUND(                     SUM(CASE WHEN p.PAYMENT_STATUS = 'FAILED' THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as FAILURE_RATE,                 ROUND(                     1.5, 2                 ) as AVG_PROCESSING_TIME_MINUTES,                 -- 시간대별 사용률                 ROUND(                     SUM(CASE WHEN TO_NUMBER(TO_CHAR(p.CREATED_AT, 'HH24')) BETWEEN 6 AND 11 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as MORNING_USAGE_RATE,                 ROUND(                     SUM(CASE WHEN TO_NUMBER(TO_CHAR(p.CREATED_AT, 'HH24')) BETWEEN 12 AND 17 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as AFTERNOON_USAGE_RATE,                 ROUND(                     SUM(CASE WHEN TO_NUMBER(TO_CHAR(p.CREATED_AT, 'HH24')) BETWEEN 18 AND 23 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as EVENING_USAGE_RATE,                 ROUND(                     SUM(CASE WHEN TO_NUMBER(TO_CHAR(p.CREATED_AT, 'HH24')) BETWEEN 0 AND 5 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as NIGHT_USAGE_RATE,                 -- 요일별 사용률                 ROUND(                     SUM(CASE WHEN TO_CHAR(p.CREATED_AT, 'D') IN ('2','3','4','5','6') THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as WEEKDAY_USAGE_RATE,                 ROUND(                     SUM(CASE WHEN TO_CHAR(p.CREATED_AT, 'D') IN ('1','7') THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2                 ) as WEEKEND_USAGE_RATE,                 -- 상위 국가 분석 (서브쿼리로 처리)                 (SELECT country FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                     ORDER BY cnt DESC                 ) WHERE ROWNUM = 1) as TOP_COUNTRY_1,                 (SELECT ROUND(cnt * 100.0 / total_cnt, 2) FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt, SUM(COUNT(*)) OVER() as total_cnt,                            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                 ) WHERE rn = 1) as TOP_COUNTRY_1_RATE,                 (SELECT country FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt,                            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                 ) WHERE rn = 2) as TOP_COUNTRY_2,                 (SELECT ROUND(cnt * 100.0 / total_cnt, 2) FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt, SUM(COUNT(*)) OVER() as total_cnt,                            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                 ) WHERE rn = 2) as TOP_COUNTRY_2_RATE,                 (SELECT country FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt,                            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                 ) WHERE rn = 3) as TOP_COUNTRY_3,                 (SELECT ROUND(cnt * 100.0 / total_cnt, 2) FROM (                     SELECT ua2.COUNTRY, COUNT(*) as cnt, SUM(COUNT(*)) OVER() as total_cnt,                            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn                     FROM PAYMENTS p2, ORDERS o2, USER_ADDRESSES ua2                     WHERE p2.ORDER_ID = o2.ORDER_ID                     AND o2.BILLING_ADDRESS_ID = ua2.ADDRESS_ID                     AND p2.PAYMENT_METHOD = p.PAYMENT_METHOD                     GROUP BY ua2.COUNTRY                 ) WHERE rn = 3) as TOP_COUNTRY_3_RATE,                 -- 월별 성장률 (현재 월 vs 이전 월)                 NVL(                     (current_month.CURRENT_AMOUNT - previous_month.PREVIOUS_AMOUNT) /                      NULLIF(previous_month.PREVIOUS_AMOUNT, 0) * 100, 0                 ) as MONTHLY_GROWTH_RATE             FROM PAYMENTS p,                  -- 현재 월 데이터                  (SELECT                      p3.PAYMENT_METHOD,                     SUM(p3.AMOUNT) as CURRENT_AMOUNT                   FROM PAYMENTS p3                   WHERE TO_CHAR(p3.CREATED_AT, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM')                   AND p3.PAYMENT_STATUS = 'COMPLETED'                   GROUP BY p3.PAYMENT_METHOD) current_month,                  -- 이전 월 데이터                  (SELECT                      p4.PAYMENT_METHOD,                     SUM(p4.AMOUNT) as PREVIOUS_AMOUNT                   FROM PAYMENTS p4                   WHERE TO_CHAR(p4.CREATED_AT, 'YYYY-MM') = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYY-MM')                   AND p4.PAYMENT_STATUS = 'COMPLETED'                   GROUP BY p4.PAYMENT_METHOD) previous_month             WHERE 1=1                                           AND p.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                 AND p.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                       AND p.PAYMENT_METHOD = current_month.PAYMENT_METHOD(+)             AND p.PAYMENT_METHOD = previous_month.PAYMENT_METHOD(+)             GROUP BY p.PAYMENT_METHOD, current_month.CURRENT_AMOUNT, previous_month.PREVIOUS_AMOUNT         )         ORDER BY OVERALL_RANK\n### Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 4021"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentList",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 15\n### The error may exist in file:///tmp/mapper-6918362187119740229.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentList-Inline\n### The error occurred while setting parameters\n### SQL: SELECT * FROM (             SELECT                  p.PAYMENT_ID,                 p.ORDER_ID,                 p.PAYMENT_METHOD,                 p.PAYMENT_STATUS,                 p.AMOUNT,                 p.CURRENCY,                 p.TRANSACTION_ID,                 p.CREATED_AT,                 o.USER_ID,                 u.EMAIL as USER_EMAIL,                 ROW_NUMBER() OVER (ORDER BY p.CREATED_AT DESC) as RN             FROM PAYMENTS p,                  ORDERS o,                  USERS u             WHERE p.ORDER_ID = o.ORDER_ID             AND o.USER_ID = u.USER_ID                               AND p.PAYMENT_METHOD = ?                                               AND p.PAYMENT_STATUS = ?                                                 AND p.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                 AND p.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                                 AND p.AMOUNT >= ?                                                 AND p.AMOUNT <= ?                         )                         WHERE ROWNUM <= ? + ?               AND RN > ?                   ORDER BY RN\n### Cause: org.postgresql.util.PSQLException: ERROR: subquery in FROM must have an alias\n  Hint: For example, FROM (SELECT ...) [AS] foo.\n  Position: 15"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentCount",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: numeric >= character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 419\n### The error may exist in file:///tmp/mapper-6174176730992194504.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentCount-Inline\n### The error occurred while setting parameters\n### SQL: SELECT COUNT(*)         FROM PAYMENTS p,              ORDERS o         WHERE p.ORDER_ID = o.ORDER_ID                       AND p.PAYMENT_METHOD = ?                                 AND p.PAYMENT_STATUS = ?                                   AND p.CREATED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                     AND p.CREATED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                     AND p.AMOUNT >= ?                                     AND p.AMOUNT <= ?\n### Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: numeric >= character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 419"
  }, {
    "xmlFile" : "PaymentMapper.xml",
    "sqlId" : "selectPaymentDetail",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 537\n### The error may exist in file:///tmp/mapper-9087212465287897930.xml\n### The error may involve amzn.bo.mapper.PaymentMapper.selectPaymentDetail-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PAYMENT_ID,             p.ORDER_ID,             p.PAYMENT_METHOD,             p.PAYMENT_STATUS,             p.AMOUNT,             p.CURRENCY,             p.TRANSACTION_ID,             p.GATEWAY_RESPONSE,             p.CREATED_AT,             o.USER_ID,             u.EMAIL as USER_EMAIL,             u.FIRST_NAME || ' ' || u.LAST_NAME as USER_NAME         FROM PAYMENTS p,              ORDERS o,              USERS u         WHERE p.ORDER_ID = o.ORDER_ID         AND o.USER_ID = u.USER_ID         AND p.PAYMENT_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 537"
  }, {
    "xmlFile" : "ProductAdvancedMapper.xml",
    "sqlId" : "selectProductLifecycleAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1442\n### The error may exist in file:///tmp/mapper-143845861446568326.xml\n### The error may involve amzn.bo.mapper.ProductAdvancedMapper.selectProductLifecycleAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.CREATED_AT as LAUNCH_DATE,             TRUNC(SYSDATE) - TRUNC(CAST(p.CREATED_AT AS DATE)) as DAYS_SINCE_LAUNCH,             NVL(sales.TOTAL_QUANTITY_SOLD, 0) as TOTAL_QUANTITY_SOLD,             NVL(sales.TOTAL_REVENUE, 0) as TOTAL_REVENUE,             NVL(sales.TOTAL_QUANTITY_SOLD, 0) as PEAK_MONTHLY_SALES,             NVL(sales.TOTAL_QUANTITY_SOLD, 0) as RECENT_MONTHLY_SALES,             CASE                  WHEN TRUNC(SYSDATE) - TRUNC(CAST(p.CREATED_AT AS DATE)) <= 30 THEN 'INTRODUCTION'                 WHEN NVL(sales.TOTAL_QUANTITY_SOLD, 0) >= 100 THEN 'GROWTH'                 WHEN NVL(sales.TOTAL_QUANTITY_SOLD, 0) >= 50 THEN 'MATURITY'                 WHEN NVL(sales.TOTAL_QUANTITY_SOLD, 0) > 0 THEN 'DECLINE'                 ELSE 'DISCONTINUED'             END as LIFECYCLE_STAGE,             100 as PERFORMANCE_RATIO,             0 as TOTAL_REVIEWS,             0 as AVG_RATING         FROM PRODUCTS p,              (SELECT                  oi.PRODUCT_ID,                 SUM(oi.QUANTITY) as TOTAL_QUANTITY_SOLD,                 SUM(oi.TOTAL_PRICE) as TOTAL_REVENUE               FROM ORDER_ITEMS oi,                    ORDERS o               WHERE oi.ORDER_ID = o.ORDER_ID               AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               GROUP BY oi.PRODUCT_ID) sales         WHERE p.PRODUCT_ID = sales.PRODUCT_ID(+)         AND p.STATUS = 'ACTIVE'         ORDER BY DAYS_SINCE_LAUNCH DESC, TOTAL_REVENUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1442"
  }, {
    "xmlFile" : "ProductAdvancedMapper.xml",
    "sqlId" : "selectInventoryForecastAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1106\n### The error may exist in file:///tmp/mapper-7752390169714382083.xml\n### The error may involve amzn.bo.mapper.ProductAdvancedMapper.selectInventoryForecastAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             c.CATEGORY_NAME,             NVL(i.QUANTITY_AVAILABLE, 0) as CURRENT_STOCK,             NVL(i.REORDER_LEVEL, 10) as REORDER_POINT,             NVL(i.REORDER_LEVEL * 5, 50) as MAX_STOCK_LEVEL,             1 as DAILY_AVG_SALES,             7 as WEEKLY_AVG_SALES,             30 as MONTHLY_AVG_SALES,             NVL(i.QUANTITY_AVAILABLE, 0) as DAYS_OF_STOCK,             NVL(i.REORDER_LEVEL, 10) as REORDER_LEAD_TIME_DAYS,             CASE                  WHEN NVL(i.QUANTITY_AVAILABLE, 0) <= 0 THEN 'OUT_OF_STOCK'                 WHEN NVL(i.QUANTITY_AVAILABLE, 0) <= NVL(i.REORDER_LEVEL, 10) THEN 'LOW_STOCK'                 WHEN NVL(i.QUANTITY_AVAILABLE, 0) >= NVL(i.REORDER_LEVEL * 5, 50) THEN 'OVERSTOCK'                 ELSE 'NORMAL'             END as STOCK_STATUS,             1.0 as DEMAND_TREND,             'STABLE_DEMAND' as DEMAND_PATTERN         FROM PRODUCTS p,              CATEGORIES c,              INVENTORY i         WHERE p.CATEGORY_ID = c.CATEGORY_ID         AND p.PRODUCT_ID = i.PRODUCT_ID(+)         AND p.STATUS = 'ACTIVE'         ORDER BY              CASE STOCK_STATUS                  WHEN 'OUT_OF_STOCK' THEN 1                  WHEN 'LOW_STOCK' THEN 2                  WHEN 'OVERSTOCK' THEN 3                  ELSE 4              END,             p.PRODUCT_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 1106"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectCategoryHierarchy",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"as\"\n  Position: 269\n### The error may exist in file:///tmp/mapper-15524092752602390079.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              CATEGORY_ID,             PARENT_CATEGORY_ID,             CATEGORY_NAME,             DESCRIPTION,             LEVEL as CATEGORY_LEVEL,             SYS_CONNECT_BY_PATH(CATEGORY_NAME, ' > ') as CATEGORY_PATH,             CONNECT_BY_ROOT CATEGORY_NAME as ROOT_CATEGORY,             CONNECT_BY_ISLEAF as IS_LEAF,             (SELECT COUNT(*) FROM PRODUCTS p WHERE p.CATEGORY_ID = c.CATEGORY_ID) as PRODUCT_COUNT,             (SELECT COUNT(*)               FROM PRODUCTS p               WHERE p.CATEGORY_ID IN (                 SELECT CATEGORY_ID                  FROM CATEGORIES                  START WITH CATEGORY_ID = c.CATEGORY_ID                  CONNECT BY PRIOR CATEGORY_ID = PARENT_CATEGORY_ID              )) as TOTAL_PRODUCT_COUNT_INCLUDING_SUBCATEGORIES,             SORT_ORDER,             IS_ACTIVE         FROM CATEGORIES c         START WITH PARENT_CATEGORY_ID IS NULL         CONNECT BY PRIOR CATEGORY_ID = PARENT_CATEGORY_ID         ORDER SIBLINGS BY SORT_ORDER, CATEGORY_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"as\"\n  Position: 269"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductList",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 656\n### The error may exist in file:///tmp/mapper-9536621743595239787.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductList-Inline\n### The error occurred while setting parameters\n### SQL: SELECT * FROM (             SELECT                  p.PRODUCT_ID,                 p.PRODUCT_NAME,                 p.SKU,                 p.BRAND,                 p.BASE_PRICE as PRICE,                 0 as STOCK_QUANTITY,                 p.STATUS,                 p.CREATED_AT,                 p.UPDATED_AT,                 c.CATEGORY_NAME,                 0 as TOTAL_SOLD,                 0 as TOTAL_REVENUE,                 0 as AVG_RATING,                 0 as REVIEW_COUNT,                 ROW_NUMBER() OVER (ORDER BY p.CREATED_AT DESC) as RN             FROM PRODUCTS p,                  CATEGORIES c             WHERE p.CATEGORY_ID = c.CATEGORY_ID(+)                               AND UPPER(p.PRODUCT_NAME) LIKE '%' || UPPER(?) || '%'                                             AND UPPER(p.BRAND) LIKE '%' || UPPER(?) || '%'                                                           AND p.CATEGORY_ID = ?                                               AND p.BASE_PRICE >= ?                                                 AND p.BASE_PRICE <= ?                         )                         WHERE ROWNUM <= ? + ?                 AND RN > ?                     ORDER BY RN\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 656"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductCount",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 276\n### The error may exist in file:///tmp/mapper-10096120085172822129.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductCount-Inline\n### The error occurred while setting parameters\n### SQL: SELECT COUNT(*)         FROM PRODUCTS p         WHERE 1=1                       AND UPPER(p.PRODUCT_NAME) LIKE '%' || UPPER(?) || '%'                                 AND UPPER(p.BRAND) LIKE '%' || UPPER(?) || '%'                                           AND p.CATEGORY_ID = ?                                   AND p.BASE_PRICE >= ?                                     AND p.BASE_PRICE <= ?\n### Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 276"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductDetail",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 517\n### The error may exist in file:///tmp/mapper-73333542758446309.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductDetail-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.BRAND,             p.BASE_PRICE as PRICE,             0 as STOCK_QUANTITY,             p.STATUS,             p.DESCRIPTION,             p.CREATED_AT,             p.UPDATED_AT,             c.CATEGORY_NAME,             0 as TOTAL_SOLD,             0 as TOTAL_REVENUE,             0 as AVG_RATING,             0 as REVIEW_COUNT         FROM PRODUCTS p,              CATEGORIES c         WHERE p.CATEGORY_ID = c.CATEGORY_ID(+)         AND p.PRODUCT_ID = ?\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 517"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductPerformanceAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 4124\n### The error may exist in file:///tmp/mapper-17926817413752599512.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductPerformanceAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.BRAND,             c.CATEGORY_NAME,             sales_stats.TOTAL_SOLD,             sales_stats.TOTAL_REVENUE,             sales_stats.AVG_SELLING_PRICE,             sales_stats.SALES_RANK,             sales_stats.CATEGORY_SALES_RANK,             sales_stats.BRAND_SALES_RANK,             review_stats.AVG_RATING,             review_stats.REVIEW_COUNT,             inventory_stats.CURRENT_STOCK,             inventory_stats.STOCK_TURNOVER_RATE,             DECODE(SIGN(sales_stats.REVENUE_GROWTH), 1, 'GROWING', 0, 'STABLE', -1, 'DECLINING') as TREND,             sales_stats.REVENUE_GROWTH,             sales_stats.QUANTITY_GROWTH,                           CASE                  WHEN sales_stats.SALES_RANK <= 100 THEN 'TOP_SELLER'                 WHEN sales_stats.SALES_RANK <= 1000 THEN 'GOOD_SELLER'                 WHEN sales_stats.TOTAL_SOLD > 0 THEN 'REGULAR'                 ELSE 'SLOW_MOVING'             END as PERFORMANCE_CATEGORY                       FROM PRODUCTS p,              CATEGORIES c,              (SELECT                  oi.PRODUCT_ID,                 SUM(oi.QUANTITY) as TOTAL_SOLD,                 SUM(oi.TOTAL_PRICE) as TOTAL_REVENUE,                 AVG(oi.UNIT_PRICE) as AVG_SELLING_PRICE,                 DENSE_RANK() OVER (ORDER BY SUM(oi.TOTAL_PRICE) DESC) as SALES_RANK,                 DENSE_RANK() OVER (PARTITION BY p2.CATEGORY_ID ORDER BY SUM(oi.TOTAL_PRICE) DESC) as CATEGORY_SALES_RANK,                 DENSE_RANK() OVER (PARTITION BY p2.BRAND ORDER BY SUM(oi.TOTAL_PRICE) DESC) as BRAND_SALES_RANK,                 -- 최근 3개월 vs 이전 3개월 매출 성장률                 (SUM(CASE   WHEN o.ORDERED_AT >= ADD_MONTHS(SYSDATE, -3) THEN   oi.TOTAL_PRICE ELSE 0 END) -                  SUM(CASE WHEN o.ORDERED_AT BETWEEN ADD_MONTHS(SYSDATE, -6) AND ADD_MONTHS(SYSDATE, -3) THEN oi.TOTAL_PRICE ELSE 0 END)) /                 NULLIF(SUM(CASE WHEN o.ORDERED_AT BETWEEN ADD_MONTHS(SYSDATE, -6) AND ADD_MONTHS(SYSDATE, -3) THEN oi.TOTAL_PRICE ELSE 0 END), 0) * 100 as REVENUE_GROWTH,                 -- 최근 3개월 vs 이전 3개월 판매량 성장률                 (SUM(CASE   WHEN o.ORDERED_AT >= ADD_MONTHS(SYSDATE, -3) THEN   oi.QUANTITY ELSE 0 END) -                  SUM(CASE WHEN o.ORDERED_AT BETWEEN ADD_MONTHS(SYSDATE, -6) AND ADD_MONTHS(SYSDATE, -3) THEN oi.QUANTITY ELSE 0 END)) /                 NULLIF(SUM(CASE WHEN o.ORDERED_AT BETWEEN ADD_MONTHS(SYSDATE, -6) AND ADD_MONTHS(SYSDATE, -3) THEN oi.QUANTITY ELSE 0 END), 0) * 100 as QUANTITY_GROWTH               FROM ORDER_ITEMS oi, ORDERS o, PRODUCTS p2               WHERE oi.ORDER_ID = o.ORDER_ID               AND oi.PRODUCT_ID = p2.PRODUCT_ID               AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                                   AND o.ORDERED_AT >= TO_DATE(?, 'YYYY-MM-DD')                                                     AND o.ORDERED_AT <= TO_DATE(?, 'YYYY-MM-DD')                                 GROUP BY oi.PRODUCT_ID, p2.CATEGORY_ID, p2.BRAND) sales_stats,              (SELECT                  pr.PRODUCT_ID,                 AVG(pr.RATING) as AVG_RATING,                 COUNT(*) as REVIEW_COUNT               FROM PRODUCT_REVIEWS pr               WHERE pr.STATUS = 'APPROVED'               GROUP BY pr.PRODUCT_ID) review_stats,              (SELECT                  i.PRODUCT_ID,                 SUM(i.QUANTITY_AVAILABLE) as CURRENT_STOCK,                 CASE                      WHEN AVG(i.QUANTITY_ON_HAND) > 0                     THEN NVL(sales_stats2.TOTAL_SOLD, 0) / AVG(i.QUANTITY_ON_HAND) * 12                     ELSE 0                 END as STOCK_TURNOVER_RATE               FROM INVENTORY i,                    (SELECT oi.PRODUCT_ID, SUM(oi.QUANTITY) as TOTAL_SOLD                     FROM ORDER_ITEMS oi, ORDERS o                     WHERE oi.ORDER_ID = o.ORDER_ID                       AND o.ORDERED_AT >= ADD_MONTHS(SYSDATE, -12)                       AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                     GROUP BY oi.PRODUCT_ID) sales_stats2               WHERE i.PRODUCT_ID = sales_stats2.PRODUCT_ID(+)               GROUP BY i.PRODUCT_ID, sales_stats2.TOTAL_SOLD) inventory_stats         WHERE p.CATEGORY_ID = c.CATEGORY_ID         AND p.PRODUCT_ID = sales_stats.PRODUCT_ID(+)         AND p.PRODUCT_ID = review_stats.PRODUCT_ID(+)         AND p.PRODUCT_ID = inventory_stats.PRODUCT_ID(+)                       AND p.CATEGORY_ID = ?                                 AND p.BRAND = ?                             ORDER BY NVL(sales_stats.SALES_RANK, 999999), p.PRODUCT_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 4124"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductRecommendations",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"WITH\"\n  Position: 2876\n### The error may exist in file:///tmp/mapper-4052579706833659313.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductRecommendations-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.BASE_PRICE,             c.CATEGORY_NAME,             rec_stats.RECOMMENDATION_SCORE,             rec_stats.FREQUENTLY_BOUGHT_TOGETHER_COUNT,             rec_stats.SIMILAR_CUSTOMERS_COUNT,             rec_stats.CATEGORY_AFFINITY_SCORE,             RANK() OVER (ORDER BY rec_stats.RECOMMENDATION_SCORE DESC) as RECOMMENDATION_RANK         FROM PRODUCTS p,              CATEGORIES c,              (SELECT                  target_product.PRODUCT_ID,                 -- 함께 구매된 횟수 기반 점수                 NVL(bought_together.TOGETHER_COUNT, 0) * 0.4 +                 -- 유사 고객 구매 패턴 기반 점수                   NVL(similar_customers.SIMILAR_PURCHASE_SCORE, 0) * 0.3 +                 -- 카테고리 친화도 점수                 NVL(category_affinity.AFFINITY_SCORE, 0) * 0.3 as RECOMMENDATION_SCORE,                 NVL(bought_together.TOGETHER_COUNT, 0) as FREQUENTLY_BOUGHT_TOGETHER_COUNT,                 NVL(similar_customers.SIMILAR_CUSTOMERS_COUNT, 0) as SIMILAR_CUSTOMERS_COUNT,                 NVL(category_affinity.AFFINITY_SCORE, 0) as CATEGORY_AFFINITY_SCORE               FROM PRODUCTS target_product,                    -- 함께 구매된 상품 분석                    (SELECT                        oi2.PRODUCT_ID,                       COUNT(*) as TOGETHER_COUNT                     FROM ORDER_ITEMS oi1, ORDER_ITEMS oi2                     WHERE oi1.ORDER_ID = oi2.ORDER_ID                     AND oi1.PRODUCT_ID = ?                     AND oi2.PRODUCT_ID != ?                     GROUP BY oi2.PRODUCT_ID) bought_together,                    -- 유사 고객 구매 패턴 분석                    (SELECT                        oi_other.PRODUCT_ID,                       COUNT(DISTINCT oi_other.ORDER_ID) as SIMILAR_PURCHASE_SCORE,                       COUNT(DISTINCT o_other.USER_ID) as SIMILAR_CUSTOMERS_COUNT                     FROM ORDER_ITEMS oi_base, ORDERS o_base,                          ORDER_ITEMS oi_other, ORDERS o_other                     WHERE oi_base.PRODUCT_ID = ?                     AND oi_base.ORDER_ID = o_base.ORDER_ID                     AND o_base.USER_ID = o_other.USER_ID                     AND o_other.ORDER_ID = oi_other.ORDER_ID                     AND oi_other.PRODUCT_ID != ?                     AND o_base.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                     AND o_other.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                     GROUP BY oi_other.PRODUCT_ID) similar_customers,                    -- 카테고리 친화도 분석                    (SELECT                        p_cat.PRODUCT_ID,                       CASE                          WHEN p_cat.CATEGORY_ID = base_cat.CATEGORY_ID THEN 100                         WHEN p_cat.CATEGORY_ID IN (                           SELECT CATEGORY_ID                            FROM CATEGORIES                            START WITH CATEGORY_ID = base_cat.CATEGORY_ID                           CONNECT BY PRIOR PARENT_CATEGORY_ID = CATEGORY_ID                           UNION                           SELECT CATEGORY_ID                            FROM CATEGORIES                            START WITH PARENT_CATEGORY_ID = base_cat.CATEGORY_ID                           CONNECT BY PRIOR CATEGORY_ID = PARENT_CATEGORY_ID                         ) THEN 70                         ELSE 20                       END as AFFINITY_SCORE                     FROM PRODUCTS p_cat,                           (SELECT CATEGORY_ID FROM PRODUCTS WHERE PRODUCT_ID = ?) base_cat) category_affinity               WHERE target_product.PRODUCT_ID = bought_together.PRODUCT_ID(+)               AND target_product.PRODUCT_ID = similar_customers.PRODUCT_ID(+)               AND target_product.PRODUCT_ID = category_affinity.PRODUCT_ID(+)               AND target_product.PRODUCT_ID != ?               AND target_product.STATUS = 'ACTIVE') rec_stats         WHERE p.PRODUCT_ID = rec_stats.PRODUCT_ID         AND p.CATEGORY_ID = c.CATEGORY_ID           AND rec_stats.RECOMMENDATION_SCORE > ?                           AND ROWNUM <= ?                     ORDER BY RECOMMENDATION_RANK\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \"WITH\"\n  Position: 2876"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectCategoryStatistics",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 810\n### The error may exist in file:///tmp/mapper-17288236395511474543.xml\n### The error may involve defaultParameterMap\n### The error occurred while setting parameters\n### SQL: SELECT              c.CATEGORY_ID,             c.CATEGORY_NAME,             c.PARENT_CATEGORY_ID,             COUNT(p.PRODUCT_ID) as PRODUCT_COUNT,             COUNT(CASE WHEN p.STATUS = 'ACTIVE' THEN 1 END) as ACTIVE_PRODUCTS,             COUNT(CASE WHEN p.STATUS = 'INACTIVE' THEN 1 END) as INACTIVE_PRODUCTS,             AVG(p.BASE_PRICE) as AVG_PRICE,             MIN(p.BASE_PRICE) as MIN_PRICE,             MAX(p.BASE_PRICE) as MAX_PRICE,             ROUND(COUNT(CASE WHEN p.STATUS = 'ACTIVE' THEN 1 END) * 100.0 / NULLIF(COUNT(p.PRODUCT_ID), 0), 2) as ACTIVE_PERCENTAGE,             ROUND(COUNT(CASE WHEN p.STATUS = 'INACTIVE' THEN 1 END) * 100.0 / NULLIF(COUNT(p.PRODUCT_ID), 0), 2) as INACTIVE_PERCENTAGE         FROM CATEGORIES c,              PRODUCTS p         WHERE c.CATEGORY_ID = p.CATEGORY_ID(+)         GROUP BY c.CATEGORY_ID, c.CATEGORY_NAME, c.PARENT_CATEGORY_ID         ORDER BY PRODUCT_COUNT DESC, c.CATEGORY_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 810"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductInventoryStatus",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 864\n### The error may exist in file:///tmp/mapper-17614322735609914678.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductInventoryStatus-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             p.BRAND,             c.CATEGORY_NAME,             p.BASE_PRICE,             p.STATUS,             COALESCE(inv.QUANTITY_ON_HAND, 0) as CURRENT_STOCK,             COALESCE(inv.QUANTITY_RESERVED, 0) as RESERVED_STOCK,             COALESCE(inv.QUANTITY_AVAILABLE, 0) as AVAILABLE_STOCK,             COALESCE(inv.REORDER_LEVEL, 10) as REORDER_LEVEL,                           CASE                  WHEN COALESCE(inv.QUANTITY_AVAILABLE, 0) = 0 THEN 'OUT_OF_STOCK'                 WHEN COALESCE(inv.QUANTITY_AVAILABLE, 0) <= COALESCE(inv.REORDER_LEVEL, 10) THEN 'LOW_STOCK'                 ELSE 'IN_STOCK'             END as STOCK_STATUS                       FROM PRODUCTS p,              CATEGORIES c,              INVENTORY inv         WHERE p.CATEGORY_ID = c.CATEGORY_ID(+)         AND p.PRODUCT_ID = inv.PRODUCT_ID(+)                   AND 1=1                                                       AND p.CATEGORY_ID = ?                       ORDER BY              CASE                  WHEN COALESCE(inv.QUANTITY_AVAILABLE, 0) = 0 THEN 1                   WHEN COALESCE(inv.QUANTITY_AVAILABLE, 0) <= COALESCE(inv.REORDER_LEVEL, 10) THEN 2                   ELSE 3             END,             p.PRODUCT_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 864"
  }, {
    "xmlFile" : "ProductMapper.xml",
    "sqlId" : "selectProductPriceHistory",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 334\n### The error may exist in file:///tmp/mapper-6393224048049941572.xml\n### The error may involve amzn.bo.mapper.ProductMapper.selectProductPriceHistory-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID as PRICE_HISTORY_ID,             p.PRODUCT_ID,             p.BASE_PRICE as NEW_PRICE,             'Current Price' as CHANGE_REASON,             TO_CHAR(p.UPDATED_AT, 'YYYY-MM-DD HH24:MI:SS') as CHANGED_AT,             'SYSTEM' as CHANGED_BY_USER_ID         FROM PRODUCTS p         WHERE p.PRODUCT_ID = ?         UNION ALL         SELECT              p.PRODUCT_ID + 1000000 as PRICE_HISTORY_ID,             p.PRODUCT_ID,             p.BASE_PRICE as NEW_PRICE,             'Initial Price' as CHANGE_REASON,             TO_CHAR(p.CREATED_AT, 'YYYY-MM-DD HH24:MI:SS') as CHANGED_AT,             'SYSTEM' as CHANGED_BY_USER_ID         FROM PRODUCTS p         WHERE p.PRODUCT_ID = ?         ORDER BY CHANGED_AT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: operator does not exist: bigint = character varying\n  Hint: No operator matches the given name and argument types. You might need to add explicit type casts.\n  Position: 334"
  }, {
    "xmlFile" : "SellerMapper.xml",
    "sqlId" : "selectSellerPerformanceAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 562\n### The error may exist in file:///tmp/mapper-8158541944184421647.xml\n### The error may involve amzn.bo.mapper.SellerMapper.selectSellerPerformanceAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              s.SELLER_ID,             s.SELLER_NAME,             s.COMPANY_NAME,             s.EMAIL,             s.STATUS,             s.COMMISSION_RATE,             0 as TOTAL_ORDERS,             0 as TOTAL_REVENUE,             0 as AVG_ORDER_VALUE,             CASE                  WHEN s.COMMISSION_RATE >= 15 THEN 'PREMIUM_SELLER'                 WHEN s.COMMISSION_RATE >= 10 THEN 'STANDARD_SELLER'                 WHEN s.COMMISSION_RATE >= 5 THEN 'BASIC_SELLER'                 ELSE 'NEW_SELLER'             END as SELLER_GRADE,             TRUNC(SYSDATE) - TRUNC(CAST(s.CREATED_AT AS DATE)) as DAYS_ACTIVE,             CASE                  WHEN s.STATUS = 'ACTIVE' THEN 'ACTIVE_SELLER'                 WHEN s.STATUS = 'INACTIVE' THEN 'INACTIVE_SELLER'                 ELSE 'PENDING_SELLER'             END as ACTIVITY_STATUS         FROM SELLERS s         WHERE s.STATUS = 'ACTIVE'         ORDER BY s.COMMISSION_RATE DESC, s.CREATED_AT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 562"
  }, {
    "xmlFile" : "SellerMapper.xml",
    "sqlId" : "selectSellerProductPortfolioAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 515\n### The error may exist in file:///tmp/mapper-9366122061309724420.xml\n### The error may involve amzn.bo.mapper.SellerMapper.selectSellerProductPortfolioAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              s.SELLER_ID,             s.SELLER_NAME,             s.COMPANY_NAME,             s.EMAIL,             s.STATUS,             s.COMMISSION_RATE,             LENGTH(s.SELLER_NAME) as NAME_LENGTH,             CASE                  WHEN s.COMPANY_NAME IS NOT NULL THEN 'COMPANY_SELLER'                 ELSE 'INDIVIDUAL_SELLER'             END as SELLER_TYPE,             TO_CHAR(s.CREATED_AT, 'YYYY-MM') as REGISTRATION_MONTH,             CASE                                    WHEN s.CREATED_AT >= SYSDATE - 30 THEN 'NEW_SELLER'                 WHEN s.CREATED_AT >= SYSDATE - 90 THEN 'RECENT_SELLER'                 WHEN s.CREATED_AT >= SYSDATE - 365 THEN 'ESTABLISHED_SELLER'                                   ELSE 'VETERAN_SELLER'             END as SELLER_TENURE,             ROUND(s.COMMISSION_RATE * 100, 2) as COMMISSION_PERCENTAGE,             CASE                  WHEN s.COMMISSION_RATE >= 15 THEN 'HIGH_COMMISSION'                 WHEN s.COMMISSION_RATE >= 10 THEN 'MEDIUM_COMMISSION'                 ELSE 'LOW_COMMISSION'             END as COMMISSION_TIER         FROM SELLERS s         WHERE s.STATUS = 'ACTIVE'         ORDER BY s.COMMISSION_RATE DESC, s.CREATED_AT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 515"
  }, {
    "xmlFile" : "CustomerServiceMapper.xml",
    "sqlId" : "selectCustomerServicePerformanceAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 569\n### The error may exist in file:///tmp/mapper-1347520891575722024.xml\n### The error may involve amzn.bo.mapper.CustomerServiceMapper.selectCustomerServicePerformanceAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              ci.INQUIRY_TYPE,             ci.PRIORITY,             COUNT(*) as INQUIRY_COUNT,             COUNT(CASE WHEN ci.STATUS = 'RESOLVED' THEN 1 END) as RESOLVED_COUNT,             ROUND(COUNT(CASE WHEN ci.STATUS = 'RESOLVED' THEN 1 END) * 100.0 / COUNT(*), 2) as RESOLUTION_RATE,             ROUND(AVG(CASE WHEN ci.STATUS = 'RESOLVED' AND ci.UPDATED_AT IS NOT NULL                  THEN (CAST(ci.UPDATED_AT AS DATE) - CAST(ci.CREATED_AT AS DATE)) * 24 END), 2) as AVG_RESOLUTION_HOURS         FROM CUSTOMER_INQUIRIES ci           WHERE ci.CREATED_AT >= SYSDATE - 30           GROUP BY ci.INQUIRY_TYPE, ci.PRIORITY         ORDER BY INQUIRY_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 569"
  }, {
    "xmlFile" : "CustomerServiceMapper.xml",
    "sqlId" : "selectCustomerInquiryPatternAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 301\n### The error may exist in file:///tmp/mapper-8521431361252180827.xml\n### The error may involve amzn.bo.mapper.CustomerServiceMapper.selectCustomerInquiryPatternAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              TO_CHAR(ci.CREATED_AT, 'YYYY-MM-DD') as INQUIRY_DATE,             ci.INQUIRY_TYPE,             COUNT(*) as DAILY_INQUIRY_COUNT,             COUNT(CASE WHEN ci.PRIORITY = 'HIGH' THEN 1 END) as HIGH_PRIORITY_COUNT         FROM CUSTOMER_INQUIRIES ci           WHERE ci.CREATED_AT >= SYSDATE - 30           GROUP BY TO_CHAR(ci.CREATED_AT, 'YYYY-MM-DD'), ci.INQUIRY_TYPE         ORDER BY INQUIRY_DATE DESC, DAILY_INQUIRY_COUNT DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 301"
  }, {
    "xmlFile" : "CustomerServiceMapper.xml",
    "sqlId" : "selectCustomerSatisfactionAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 357\n### The error may exist in file:///tmp/mapper-17610739374705536874.xml\n### The error may involve amzn.bo.mapper.CustomerServiceMapper.selectCustomerSatisfactionAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              'SATISFACTION_ANALYSIS' as ANALYSIS_TYPE,             COUNT(*) as TOTAL_INQUIRIES,             COUNT(CASE WHEN STATUS = 'RESOLVED' THEN 1 END) as RESOLVED_INQUIRIES,             ROUND(COUNT(CASE WHEN STATUS = 'RESOLVED' THEN 1 END) * 100.0 / COUNT(*), 2) as RESOLUTION_RATE         FROM CUSTOMER_INQUIRIES           WHERE CREATED_AT >= SYSDATE - 30\n### Cause: org.postgresql.util.PSQLException: ERROR: column \"sysdate\" does not exist\n  Position: 357"
  }, {
    "xmlFile" : "InventoryMapper.xml",
    "sqlId" : "selectInventoryStatusAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 4638\n### The error may exist in file:///tmp/mapper-5595201594583041477.xml\n### The error may involve amzn.bo.mapper.InventoryMapper.selectInventoryStatusAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              i.INVENTORY_ID,             i.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU as PRODUCT_SKU,             p.BRAND,             c.CATEGORY_NAME,             i.WAREHOUSE_ID,             i.QUANTITY_ON_HAND,             i.QUANTITY_RESERVED,             i.QUANTITY_AVAILABLE,             i.REORDER_LEVEL,             i.LAST_UPDATED,             -- 재고 상태 분류                           CASE                  WHEN i.QUANTITY_AVAILABLE <= 0 THEN 'OUT_OF_STOCK'                 WHEN i.QUANTITY_AVAILABLE <= i.REORDER_LEVEL THEN 'LOW_STOCK'                 WHEN i.QUANTITY_AVAILABLE <= i.REORDER_LEVEL * 2 THEN 'MEDIUM_STOCK'                 ELSE 'HIGH_STOCK'             END as STOCK_STATUS,                           -- 재고 회전율 계산             NVL(                 sales_stats.MONTHLY_SALES_AVG / NULLIF(i.QUANTITY_ON_HAND, 0) * 12, 0             ) as INVENTORY_TURNOVER_RATE,             -- 재고 일수 (현재 재고로 몇 일간 판매 가능한지)             CASE                  WHEN sales_stats.DAILY_SALES_AVG > 0                  THEN ROUND(i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG, 1)                 ELSE 999             END as DAYS_OF_INVENTORY,             -- 재고 가치             i.QUANTITY_ON_HAND * NVL(p.BASE_PRICE, 0) as INVENTORY_VALUE,             -- 카테고리 내 재고 순위             DENSE_RANK() OVER (                 PARTITION BY p.CATEGORY_ID                  ORDER BY i.QUANTITY_AVAILABLE DESC             ) as CATEGORY_STOCK_RANK,             -- 브랜드 내 재고 순위             DENSE_RANK() OVER (                 PARTITION BY p.BRAND                  ORDER BY i.QUANTITY_AVAILABLE DESC             ) as BRAND_STOCK_RANK,             -- 창고 내 재고 순위             DENSE_RANK() OVER (                 PARTITION BY i.WAREHOUSE_ID                  ORDER BY i.QUANTITY_AVAILABLE DESC             ) as WAREHOUSE_STOCK_RANK,             -- 판매 속도 기반 우선순위                           CASE                  WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 7 THEN 'URGENT'                 WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 14 THEN 'HIGH'                 WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 30 THEN 'MEDIUM'                 ELSE 'LOW'             END as RESTOCK_PRIORITY,                           -- 예상 재고 소진일             CASE                  WHEN sales_stats.DAILY_SALES_AVG > 0                  THEN SYSDATE + (i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG)                 ELSE NULL             END as ESTIMATED_STOCKOUT_DATE,             -- 안전 재고 권장량             CEIL(                 NVL(sales_stats.DAILY_SALES_AVG, 0) * 14 +                  NVL(sales_stats.SALES_VOLATILITY, 0) * 2             ) as RECOMMENDED_SAFETY_STOCK         FROM INVENTORY i,              PRODUCTS p,              CATEGORIES c,              (SELECT                  oi.PRODUCT_ID,                 AVG(daily_sales.DAILY_QUANTITY) as DAILY_SALES_AVG,                 AVG(monthly_sales.MONTHLY_QUANTITY) as MONTHLY_SALES_AVG,                 STDDEV(daily_sales.DAILY_QUANTITY) as SALES_VOLATILITY               FROM ORDER_ITEMS oi,                    ORDERS o,                    (SELECT                        oi2.PRODUCT_ID,                       TRUNC(o2.ORDERED_AT) as SALE_DATE,                       SUM(oi2.QUANTITY) as DAILY_QUANTITY                     FROM ORDER_ITEMS oi2, ORDERS o2                     WHERE oi2.ORDER_ID = o2.ORDER_ID                     AND o2.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                       AND o2.ORDERED_AT >= SYSDATE - 90                       GROUP BY oi2.PRODUCT_ID, TRUNC(o2.ORDERED_AT)) daily_sales,                    (SELECT                        oi3.PRODUCT_ID,                       TO_CHAR(o3.ORDERED_AT, 'YYYY-MM') as SALE_MONTH,                       SUM(oi3.QUANTITY) as MONTHLY_QUANTITY                     FROM ORDER_ITEMS oi3, ORDERS o3                     WHERE oi3.ORDER_ID = o3.ORDER_ID                     AND o3.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                       AND o3.ORDERED_AT >= SYSDATE - 365                       GROUP BY oi3.PRODUCT_ID, TO_CHAR(o3.ORDERED_AT, 'YYYY-MM')) monthly_sales               WHERE oi.ORDER_ID = o.ORDER_ID               AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')               AND oi.PRODUCT_ID = daily_sales.PRODUCT_ID               AND oi.PRODUCT_ID = monthly_sales.PRODUCT_ID               GROUP BY oi.PRODUCT_ID) sales_stats         WHERE i.PRODUCT_ID = p.PRODUCT_ID         AND p.CATEGORY_ID = c.CATEGORY_ID         AND i.PRODUCT_ID = sales_stats.PRODUCT_ID(+)                       AND i.WAREHOUSE_ID = ?                                                         AND CASE                  WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 7 THEN 'URGENT'                 WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 14 THEN 'HIGH'                 WHEN sales_stats.DAILY_SALES_AVG > 0 AND i.QUANTITY_AVAILABLE / sales_stats.DAILY_SALES_AVG <= 30 THEN 'MEDIUM'                 ELSE 'LOW'             END = ?                                 ORDER BY              DECODE(RESTOCK_PRIORITY, 'URGENT', 1, 'HIGH', 2, 'MEDIUM', 3, 4),             DAYS_OF_INVENTORY,             p.PRODUCT_NAME\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 4638"
  }, {
    "xmlFile" : "InventoryMapper.xml",
    "sqlId" : "selectWarehouseInventoryAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 938\n### The error may exist in file:///tmp/mapper-4009114210040391517.xml\n### The error may involve amzn.bo.mapper.InventoryMapper.selectWarehouseInventoryAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              warehouse_id,             category_name,             brand,             COUNT(*) as PRODUCT_COUNT,             SUM(current_stock) as TOTAL_STOCK,             AVG(current_stock) as AVG_STOCK_PER_PRODUCT,             SUM(stock_value) as TOTAL_STOCK_VALUE,             GROUPING(warehouse_id) as WAREHOUSE_GROUPING,             GROUPING(category_name) as CATEGORY_GROUPING,             GROUPING(brand) as BRAND_GROUPING         FROM (             SELECT                  1 as warehouse_id,                 c.CATEGORY_NAME as category_name,                 NVL(p.BRAND, 'UNKNOWN') as brand,                 NVL(pv.STOCK_QUANTITY, 0) as current_stock,                 NVL(pv.STOCK_QUANTITY, 0) * NVL(p.BASE_PRICE, 0) as stock_value             FROM PRODUCTS p,                  CATEGORIES c,                  PRODUCT_VARIANTS pv             WHERE p.CATEGORY_ID = c.CATEGORY_ID             AND p.PRODUCT_ID = pv.PRODUCT_ID(+)             AND p.STATUS = 'ACTIVE'         )         GROUP BY ROLLUP(warehouse_id, category_name, brand)         ORDER BY GROUPING(warehouse_id), GROUPING(category_name), GROUPING(brand), TOTAL_STOCK_VALUE DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 938"
  }, {
    "xmlFile" : "InventoryMapper.xml",
    "sqlId" : "selectInventoryMovementTracking",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 604\n### The error may exist in file:///tmp/mapper-11553888753274393851.xml\n### The error may involve amzn.bo.mapper.InventoryMapper.selectInventoryMovementTracking-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              p.PRODUCT_ID,             p.PRODUCT_NAME,             p.SKU,             1 as WAREHOUSE_ID,             SYSDATE as MOVEMENT_DATE,             'IN' as MOVEMENT_TYPE,             100 as QUANTITY,             pv.STOCK_QUANTITY as CURRENT_STOCK,                           CASE                  WHEN pv.STOCK_QUANTITY <= 10 THEN 'LOW_STOCK'                 WHEN pv.STOCK_QUANTITY <= 50 THEN 'MEDIUM_STOCK'                 ELSE 'HIGH_STOCK'             END as STOCK_STATUS                       FROM PRODUCTS p,              PRODUCT_VARIANTS pv         WHERE p.PRODUCT_ID = pv.PRODUCT_ID(+)         AND p.STATUS = 'ACTIVE'         ORDER BY p.PRODUCT_ID\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 604"
  }, {
    "xmlFile" : "InventoryMapper.xml",
    "sqlId" : "selectInventoryOptimizationAnalysis",
    "sqlType" : "SELECT",
    "errorMessage" : "\n### Error querying database.  Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 6371\n### The error may exist in file:///tmp/mapper-2287100479124626586.xml\n### The error may involve amzn.bo.mapper.InventoryMapper.selectInventoryOptimizationAnalysis-Inline\n### The error occurred while setting parameters\n### SQL: SELECT              optimization_data.PRODUCT_ID,             optimization_data.PRODUCT_NAME,             optimization_data.SKU,             optimization_data.CATEGORY_NAME,             optimization_data.CURRENT_STOCK,             optimization_data.CURRENT_RESERVED,             optimization_data.CURRENT_AVAILABLE,             optimization_data.REORDER_LEVEL,             optimization_data.DAILY_SALES_AVG,             optimization_data.SALES_VOLATILITY,             optimization_data.LEAD_TIME_DAYS,             optimization_data.CARRYING_COST_RATE,             optimization_data.ORDERING_COST,             -- EOQ (Economic Order Quantity) 계산             ROUND(                 SQRT(                     (2 * optimization_data.ANNUAL_DEMAND * optimization_data.ORDERING_COST) /                     NULLIF(optimization_data.UNIT_COST * optimization_data.CARRYING_COST_RATE, 0)                 ), 0             ) as ECONOMIC_ORDER_QUANTITY,             -- 안전 재고 계산 (서비스 레벨 95% 기준)             CEIL(                 1.65 * optimization_data.SALES_VOLATILITY * SQRT(optimization_data.LEAD_TIME_DAYS)             ) as OPTIMAL_SAFETY_STOCK,             -- 재주문점 계산             CEIL(                 optimization_data.DAILY_SALES_AVG * optimization_data.LEAD_TIME_DAYS +                 1.65 * optimization_data.SALES_VOLATILITY * SQRT(optimization_data.LEAD_TIME_DAYS)             ) as OPTIMAL_REORDER_POINT,             -- 최대 재고 수준             CEIL(                 optimization_data.DAILY_SALES_AVG * optimization_data.LEAD_TIME_DAYS +                 1.65 * optimization_data.SALES_VOLATILITY * SQRT(optimization_data.LEAD_TIME_DAYS) +                 SQRT(                     (2 * optimization_data.ANNUAL_DEMAND * optimization_data.ORDERING_COST) /                     NULLIF(optimization_data.UNIT_COST * optimization_data.CARRYING_COST_RATE, 0)                 )             ) as OPTIMAL_MAX_STOCK,             -- 현재 재고 효율성 점수                           CASE                  WHEN optimization_data.CURRENT_AVAILABLE <= 0 THEN 0                 WHEN optimization_data.CURRENT_AVAILABLE <= optimization_data.REORDER_LEVEL THEN 30                 WHEN optimization_data.CURRENT_AVAILABLE <= optimization_data.REORDER_LEVEL * 2 THEN 70                 WHEN optimization_data.CURRENT_AVAILABLE <= optimization_data.REORDER_LEVEL * 4 THEN 90                 ELSE 60  -- 과재고 상태             END as CURRENT_EFFICIENCY_SCORE,                           -- 개선 권장사항                           CASE                  WHEN optimization_data.CURRENT_AVAILABLE <= 0 THEN 'URGENT_RESTOCK'                 WHEN optimization_data.CURRENT_AVAILABLE < optimization_data.DAILY_SALES_AVG * optimization_data.LEAD_TIME_DAYS THEN 'IMMEDIATE_RESTOCK'                 WHEN optimization_data.CURRENT_AVAILABLE < optimization_data.REORDER_LEVEL THEN 'SCHEDULE_RESTOCK'                 WHEN optimization_data.CURRENT_AVAILABLE > optimization_data.REORDER_LEVEL * 5 THEN 'REDUCE_STOCK'                 ELSE 'MAINTAIN_CURRENT'             END as OPTIMIZATION_RECOMMENDATION,                           -- 예상 비용 절감             ROUND(                 ABS(optimization_data.CURRENT_AVAILABLE -                      (optimization_data.DAILY_SALES_AVG * optimization_data.LEAD_TIME_DAYS +                      1.65 * optimization_data.SALES_VOLATILITY * SQRT(optimization_data.LEAD_TIME_DAYS))) *                 optimization_data.UNIT_COST * optimization_data.CARRYING_COST_RATE / 365, 2             ) as POTENTIAL_DAILY_SAVINGS,             -- 재고 회전율 개선 가능성             ROUND(                 (optimization_data.ANNUAL_DEMAND /                   NULLIF(optimization_data.DAILY_SALES_AVG * optimization_data.LEAD_TIME_DAYS +                         1.65 * optimization_data.SALES_VOLATILITY * SQRT(optimization_data.LEAD_TIME_DAYS), 0)) -                 (optimization_data.ANNUAL_DEMAND / NULLIF(optimization_data.CURRENT_AVAILABLE, 0)), 2             ) as TURNOVER_IMPROVEMENT_POTENTIAL         FROM (             SELECT                  i.PRODUCT_ID,                 p.PRODUCT_NAME,                 p.SKU,                 c.CATEGORY_NAME,                 i.QUANTITY_ON_HAND as CURRENT_STOCK,                 i.QUANTITY_RESERVED as CURRENT_RESERVED,                 i.QUANTITY_AVAILABLE as CURRENT_AVAILABLE,                 i.REORDER_LEVEL,                 NVL(sales_stats.DAILY_SALES_AVG, 0) as DAILY_SALES_AVG,                 NVL(sales_stats.SALES_VOLATILITY, 0) as SALES_VOLATILITY,                 NVL(sales_stats.ANNUAL_DEMAND, 0) as ANNUAL_DEMAND,                 NVL(p.BASE_PRICE, 0) as UNIT_COST,                 -- 리드타임 (공급업체별로 다를 수 있지만 기본값 사용)                 NVL(supplier_info.LEAD_TIME_DAYS, 7) as LEAD_TIME_DAYS,                 -- 보관비용률 (연간, 기본 20%)                 0.20 as CARRYING_COST_RATE,                 -- 주문비용 (건당, 기본 $50)                 50 as ORDERING_COST             FROM INVENTORY i,                  PRODUCTS p,                  CATEGORIES c,                  (SELECT                      oi.PRODUCT_ID,                     AVG(daily_sales.DAILY_QUANTITY) as DAILY_SALES_AVG,                     STDDEV(daily_sales.DAILY_QUANTITY) as SALES_VOLATILITY,                     SUM(daily_sales.DAILY_QUANTITY) * 365 / 90 as ANNUAL_DEMAND                   FROM ORDER_ITEMS oi,                        ORDERS o,                        (SELECT                            oi2.PRODUCT_ID,                           TRUNC(o2.ORDERED_AT) as SALE_DATE,                           SUM(oi2.QUANTITY) as DAILY_QUANTITY                         FROM ORDER_ITEMS oi2, ORDERS o2                         WHERE oi2.ORDER_ID = o2.ORDER_ID                         AND o2.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                           AND o2.ORDERED_AT >= SYSDATE - 90                           GROUP BY oi2.PRODUCT_ID, TRUNC(o2.ORDERED_AT)) daily_sales                   WHERE oi.ORDER_ID = o.ORDER_ID                   AND o.ORDER_STATUS NOT IN ('CANCELLED', 'REFUNDED')                   AND oi.PRODUCT_ID = daily_sales.PRODUCT_ID                   GROUP BY oi.PRODUCT_ID) sales_stats,                  -- 공급업체 정보 (임시 테이블, 실제로는 SUPPLIERS 테이블과 조인)                  (SELECT PRODUCT_ID, 7 as LEAD_TIME_DAYS FROM PRODUCTS WHERE 1=2) supplier_info             WHERE i.PRODUCT_ID = p.PRODUCT_ID             AND p.CATEGORY_ID = c.CATEGORY_ID             AND i.PRODUCT_ID = sales_stats.PRODUCT_ID(+)             AND i.PRODUCT_ID = supplier_info.PRODUCT_ID(+)                               AND p.CATEGORY_ID = ?                                             AND i.WAREHOUSE_ID = ?                       ) optimization_data         WHERE optimization_data.DAILY_SALES_AVG > 0  -- 판매 실적이 있는 상품만         ORDER BY              POTENTIAL_DAILY_SAVINGS DESC,             TURNOVER_IMPROVEMENT_POTENTIAL DESC\n### Cause: org.postgresql.util.PSQLException: ERROR: syntax error at or near \")\"\n  Position: 6371"
  } ],
  "fileStatistics" : [ {
    "fileName" : "ShippingMapper.xml",
    "totalTests" : 3,
    "successCount" : 0,
    "failureCount" : 3,
    "successRate" : "0.0"
  }, {
    "fileName" : "PromotionMapper.xml",
    "totalTests" : 3,
    "successCount" : 0,
    "failureCount" : 3,
    "successRate" : "0.0"
  }, {
    "fileName" : "UserMapper.xml",
    "totalTests" : 13,
    "successCount" : 1,
    "failureCount" : 12,
    "successRate" : "7.7"
  }, {
    "fileName" : "SellerMapper.xml",
    "totalTests" : 2,
    "successCount" : 0,
    "failureCount" : 2,
    "successRate" : "0.0"
  }, {
    "fileName" : "AnalyticsMapper.xml",
    "totalTests" : 12,
    "successCount" : 2,
    "failureCount" : 10,
    "successRate" : "16.7"
  }, {
    "fileName" : "InventoryMapper.xml",
    "totalTests" : 4,
    "successCount" : 0,
    "failureCount" : 4,
    "successRate" : "0.0"
  }, {
    "fileName" : "ProductMapper.xml",
    "totalTests" : 10,
    "successCount" : 1,
    "failureCount" : 9,
    "successRate" : "10.0"
  }, {
    "fileName" : "ProductAdvancedMapper.xml",
    "totalTests" : 3,
    "successCount" : 1,
    "failureCount" : 2,
    "successRate" : "33.3"
  }, {
    "fileName" : "OrderMapper.xml",
    "totalTests" : 10,
    "successCount" : 3,
    "failureCount" : 7,
    "successRate" : "30.0"
  }, {
    "fileName" : "CustomerServiceMapper.xml",
    "totalTests" : 4,
    "successCount" : 1,
    "failureCount" : 3,
    "successRate" : "25.0"
  }, {
    "fileName" : "PaymentMapper.xml",
    "totalTests" : 12,
    "successCount" : 6,
    "failureCount" : 6,
    "successRate" : "50.0"
  } ]
}