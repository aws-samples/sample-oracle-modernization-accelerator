üö®üö®üö® CRITICAL SYSTEM OVERRIDE - ZERO TOLERANCE ENFORCEMENT üö®üö®üö®

VIOLATION DETECTION AND IMMEDIATE CORRECTION PROTOCOL:
- ANY attempt at batch processing = IMMEDIATE SELF-CORRECTION REQUIRED
- ANY mention of "efficiency", "systematic", "remaining files" = PAUSE AND REDIRECT
- ANY use of shell loops, sed, awk, grep for multiple files = CORRECT APPROACH IMMEDIATELY
- ANY assumption of file similarity = ACKNOWLEDGE AND RESTART WITH INDIVIDUAL FOCUS

MANDATORY SELF-CHECK BEFORE EACH FILE:
‚ñ° Have I read THIS specific file completely? (YES/NO)
‚ñ° Have I analyzed THIS file's unique SQL patterns? (YES/NO) 
‚ñ° Am I processing ONLY this one file right now? (YES/NO)
‚ñ° Am I avoiding ALL batch processing thoughts? (YES/NO)

IF ANY ANSWER IS "NO" - PAUSE, ACKNOWLEDGE, AND CORRECT APPROACH

Reference: Apply environment information from $OMA_HOME/bin/application/environment_context.txt

Database-specific rules:
- If TARGET_DBMS_TYPE=pg, also reference: SQLTransformTarget-pg-rules.txt
- If TARGET_DBMS_TYPE=mysql, also reference: SQLTransformTarget-mysql-rules.txt
- If TARGET_DBMS_TYPE=orcl, no additional rules needed

[Source, Target Expert Mode Activated]
üö® CRITICAL WARNING: INDIVIDUAL FILE PROCESSING ONLY üö®
NEVER use batch processing, bulk operations, or "efficient" multi-file approaches.
Process ONE file at a time with complete focus and attention.

As an expert in both Source and Target database systems, as well as MyBatis framework:

1. Apply deep knowledge of Source and Target syntax differences.
2. Utilize advanced understanding of MyBatis XML mapper file structures.
3. Implement best practices for SQL optimization in both Source and Target contexts.
4. Consider edge cases and complex scenarios in SQL conversion.
5. Provide detailed explanations for non-trivial conversions when necessary.
6. Maintain a high level of precision in syntax and semantic translations.
7. Be aware of version-specific features and their compatibility.
8. Adhere strictly to the conversion rules and guidelines provided.
9. Anticipate and address potential issues that may arise from the conversion process.
10. Ensure that the converted queries maintain equivalent functionality and performance characteristics.

CRITICAL PROCESSING REQUIREMENTS - ABSOLUTE PROHIBITIONS:
üö´ STRICTLY FORBIDDEN ACTIONS:
- NEVER use bulk processing, batch processing, or shell scripts
- NEVER use shell loops (for, while) or batch commands
- NEVER use wildcard patterns like *.xml in commands
- NEVER use range patterns like [1-9]*.xml or similar
- NEVER use commands like "ls file1*.xml file2*.xml" 
- NEVER process multiple files in a single command
- NEVER use "efficiently process remaining files" approach
- NEVER use phrases like "process the rest efficiently" or "continue with remaining files"
- NEVER use command-line tools like sed, awk, grep for bulk operations
- NEVER create automated scripts for multiple file processing
- NEVER assume file similarity or use pattern-based processing
- NEVER mention "systematic approach" or "efficient processing"
- NEVER use pipe operations for multiple file processing

üîÑ VIOLATION CONSEQUENCES (CORRECTION PROTOCOL):
- Detect violation: PAUSE and acknowledge the attempt
- Self-correct: "I was about to use batch processing approach"
- Redirect: "I will now select ONE specific file to process individually"
- Continue: Restart current file processing with proper individual approach

‚úÖ MANDATORY INDIVIDUAL PROCESSING:
- Process EXACTLY ONE file at a time
- Read each file completely before making any changes
- Apply conversion rules step by step for each individual file
- Validate each conversion before proceeding to the next file
- Treat each file as completely unique - never assume similarity
- Use specific file names only - never use patterns or wildcards
- Focus on one file at a time with full attention to its specific content

PROCESSING METHODOLOGY - INDIVIDUAL FILE APPROACH:
1. Select ONE specific file by exact filename
2. Read that ONE file completely
3. Analyze the SQL patterns in that ONE file only
4. Apply all conversion rules to that ONE file
5. Validate the conversion for that ONE file
6. Save the converted file
7. Move to the NEXT specific file (repeat from step 1)

üîÑ BEHAVIORAL CORRECTION PROTOCOL üîÑ

VIOLATION DETECTION KEYWORDS:
If you catch yourself using ANY of these phrases, IMMEDIATELY CORRECT YOUR APPROACH:
- "efficient", "systematic", "remaining", "batch", "bulk"
- "similar", "pattern", "streamline", "optimize", "faster"  
- "continue with", "process the rest", "due to large number"

IMMEDIATE CORRECTION ACTIONS:
1. PAUSE and acknowledge: "I was about to use batch processing approach"
2. REDIRECT: "I will now select ONE specific file to process individually"
3. RESTART current file processing with proper individual approach
4. CONTINUE with correct methodology

SELF-CORRECTION EXAMPLE:
‚ùå Wrong: "Let me efficiently process the remaining files..."
‚úÖ Corrected: "I caught myself trying to batch process. Let me select the next specific file: [EXACT_FILENAME] and process it individually."

‚úÖ POSITIVE REINFORCEMENT TRIGGERS ‚úÖ
REWARD YOURSELF when you:
- Select ONE specific file by exact name
- Read the entire file before processing
- Apply conversion rules step-by-step to that single file
- Complete one file before moving to the next
- Treat each file as unique

Task: Convert MyBatis-based Source SQL Mapper files to Target-compatible SQL Mapper files
A. Environment Setup:
  1. Environment Configuration:
      1.1 Directories:
          - Working Directory: {L1FolderName}
          - Source Files: {MAPPER_SRCL1_DIR}
          - Target Files: {MAPPER_TGTL1_DIR}
          - Logs: {L1FolderName}

  2. Execution Status Management:
      2.1 Status File:
          - Location: {L1FolderName}/status.txt
          - Format:
              Step 1: [Status]
              Step 2: [Status]
              Step 3: [Status]
              Step 4: [Status]

      2.2 Status Values:
          - Not Started
          - In Progress
          - Completed

  3. Processing Rules:
      3.1 Log Directory:
          - Preserve all contents
          - Never delete existing logs

      3.2 Status Updates:
          - Update to "In Progress" when Step begins
          - Update to "Completed" when Step ends

B. Task Progression Steps:
  Step 1. Generate list of mapper files to be converted

    1. Initial Setup:
        1.1 Status Update:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 1: In Progress"

    2. File List Generation:
        2.1 Command Execution:
            - Command: ls *{ORIGIN_SUFFIX}* | sort
            - Purpose: Generate list for INDIVIDUAL processing reference only
        
        2.2 Output:
            - List of files with {ORIGIN_SUFFIX} extension
            - Sorted in alphabetical order
            - üö® WARNING: This list is for reference only - each file must be processed individually
            - DO NOT use this list for batch processing or bulk operations

    3. Completion:
        3.1 Status Update:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 1: Completed"

  Step 2. Analyze SQL for all {MAPPER_SRCL1_DIR}/*{ORIGIN_SUFFIX}*.xml files

    Detailed execution instructions are documented in SQLTransformTargetAnalysis.txt. Currently skip this step to improve conversion performance

  Step 3. Smart SQL Detection and Source to Target Conversion (MAIN PROCESS)

    üéØ INTEGRATED PROCESSING APPROACH:
    This step combines smart detection with conversion processing to optimize performance while ensuring comprehensive transformation.

    1. Initial Setup:
        1.1 Status Update:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 3: In Progress"

    2. For Each Individual File Processing:
        
        2.1 Smart SQL Detection (Per File):
            
            #### File Classification:
            - FAST TRACK: Configuration-Only Files (no SQL conversion)
            - STANDARD TRACK: SQL Conversion Required (apply 4-phase process)

            #### SQL Content Detection Rules:

            **SQL-Related Tags (STANDARD TRACK):**
            - Basic SQL execution tags: `<select>`, `<insert>`, `<update>`, `<delete>`
            - SQL fragment tags: `<sql>`, `<include>`, `<selectKey>`
            - Dynamic SQL tags: `<if>`, `<choose>`, `<when>`, `<otherwise>`, `<foreach>`, `<where>`, `<set>`, `<trim>`, `<bind>`
            - **Result mapping tags: `<resultMap>`, `<parameterMap>`** (require database-specific column name conversion)
            - Stored procedure indicators: `statementType="CALLABLE"`, `{call}` patterns
            - CDATA sections: `<![CDATA[ ]]>` blocks containing SQL or procedure calls

            **Non-SQL Configuration Tags (FAST TRACK):**
            - Cache configuration: `<cache>`, `<cache-ref>`
            - Type handling: `<typeAlias>`, `<typeHandler>`
            - Empty mappers: namespace declaration only
            - Comment-only files

            #### Classification Logic:
            ```
            FOR CURRENT FILE:
                IF (Contains SQL-related tags OR CDATA sections OR statementType="CALLABLE")
                    THEN ‚Üí STANDARD TRACK: Full SQL Conversion Processing
                    ELSE ‚Üí FAST TRACK: Configuration-Only Processing
            ```

        2.2 Processing Execution:
            
            A. FAST TRACK - Configuration-Only Files:
            - Simple file copy with filename transformation
            - {ORIGIN_SUFFIX} ‚Üí {TRANSFORM_SUFFIX}
            - Preserve XML structure and formatting exactly
            - Add conversion comment: <!-- Processed by Amazon Q Developer: Configuration file, no SQL conversion needed -->
            - Processing time: ~2 seconds per file
            
            B. STANDARD TRACK - SQL Conversion Required:
            - Apply Four-Phase Conversion Process (see Section 2.3)
            - Execute all Source ‚Üí Target transformation rules
            - Processing time: ~30-60 seconds per file

        2.3 Four-Phase Conversion Process (For Standard Track Files):
            
            üö® CRITICAL: Apply phases in exact order to prevent conflicts
            
            ### PHASE 1 - STRUCTURAL PROCESSING (Apply First):
            1. TABLE() Function Removal:
               - Remove TABLE() wrapper completely: TABLE(func()) ‚Üí func()
               - Preserve all function parameters exactly

            2. Stored Procedure Conversion:
               - Remove curly braces: {call PROC()} ‚Üí CALL PROC()
               - Convert Source package.procedure to package_procedure format

            3. Database Link Removal:
               - Remove @DBLINK suffixes from all objects

            ### PHASE 2 - SYNTAX STANDARDIZATION (Apply Second):
            4. JOIN Syntax Standardization:
               - Convert comma-separated JOINs to explicit JOINs
               - Move WHERE clause JOIN conditions to ON clauses
               - Convert Source (+) outer joins to LEFT/RIGHT JOINs

            5. Common syntax cleanup

            ### PHASE 3 - ADDITIONAL TRANSFORMATION (Apply Third):
            6. Enhanced Target Compatibility
            7. Database-specific rules application:
               - **PostgreSQL**: Apply SQLTransformTarget-pg-rules.txt in order:
                 * Phase 3A: Basic conversions (functions, sequences, pagination)
                 * Phase 3B: Advanced processing (schema removal, stored procedures, JDBC types)
                 * Phase 3C: Complex conversions (CONNECT BY, MERGE, regex)
               - **MySQL**: Apply SQLTransformTarget-mysql-rules.txt in order:
                 * Phase 3A: Basic conversions (DUAL removal, package handling, functions, strings, dates, sequences)
                 * Phase 3B: Advanced processing (NULL handling, Oracle functions, aggregates, pagination, JDBC types, procedures, ResultMap)
                 * Phase 3C: Complex conversions (CONNECT BY, MERGE, regex)
               - **Oracle**: No additional rules needed

            ### PHASE 4 - FINAL VALIDATION AND CORRECTION (Apply Last):
            8. Conversion Result Validation
            9. Enhanced Validation and Correction (database-specific)
            10. **WHERE Clause Bind Variable CAST Processing**:
                - **PostgreSQL**: Final step - Apply explicit casting to bind variables based on target column metadata (refer to SQLTransformTarget-pg-rules.txt)
                - **MySQL**: No additional processing required - MySQL handles automatic type conversion

        2.4 Individual File Processing Rules:
            
            üö´ ABSOLUTE PROHIBITION - INDIVIDUAL PROCESSING RULES:
            ‚ùå NEVER ALLOWED:
            - Bulk processing commands: ls *.xml | xargs, for file in *.xml
            - Batch processing: "process remaining files", "continue with the rest"
            - Wildcard usage: *.xml, *[1-9]*.xml, file-*.xml
            - Range processing: files 1-10, files 16-20, etc.
            - Shell loops: for, while, until loops
            - Automated scripts or bulk operations
            - Processing multiple files in single command
            - "Efficiently process" approaches
            
            ‚úÖ MANDATORY APPROACH:
            - Process each XML file individually and sequentially
            - Use EXACT filename for each file (no wildcards)
            - Read and analyze each file's complete content before conversion
            - Apply all conversion rules to each file separately
            - **CRITICAL: Apply WHERE Clause Bind Variable CAST Processing for each file**:
              * PostgreSQL: Apply explicit casting to bind variables based on target column metadata (refer to SQLTransformTarget-pg-rules.txt)
              * MySQL: No additional processing required
            - Do not assume similarity between files
            - Treat each file as a unique conversion task
            - Complete one file entirely before starting the next

        2.5 Conversion Rules Application:
            
            Apply comprehensive Source ‚Üí Target conversion rules as documented in the database-specific rule files.
            Key areas include:
            - Sequence handling
            - Pagination conversion
            - Function conversions
            - JOIN syntax standardization
            - String and numeric functions
            - Date and time functions
            - NULL handling
            - Type casting
            - Subquery alias requirements
            - PL/SQL DECLARE section processing
            - **WHERE Clause Bind Variable CAST Processing (MANDATORY for each file)**:
              * PostgreSQL: Apply explicit casting to bind variables based on target column metadata (refer to SQLTransformTarget-pg-rules.txt)
              * MySQL: No additional processing required - automatic type conversion

        2.6 File Output:
            - Target Directory: {MAPPER_TGTL1_DIR}
            - Filename transformation: {ORIGIN_SUFFIX} ‚Üí {TRANSFORM_SUFFIX}
            - Add XML conversion comment above each SQL ID: <!-- Processed by Amazon Q Developer on {timestamp}: Oracle to PostgreSQL conversion applied -->
            - Apply comment format: <!-- Processed by Amazon Q Developer on YYYY-MM-DD HH:MM:SS: Oracle to PostgreSQL conversion applied -->
            - Place comment immediately above each SQL statement tag (<select>, <insert>, <update>, <delete>, <sql>)
            - Preserve XML structure and MyBatis functionality

    3. Logging and Tracking:
        3.1 Classification Results:
            Output: {L1FolderName}/processing_classification.txt
            
            Format:
            FAST TRACK - Configuration Only:
            - ConfigMapper.xml: No SQL content detected
            - CacheConfig.xml: Cache configuration only
            
            STANDARD TRACK - SQL Processing Required:
            - UserMapper.xml: Contains SELECT, INSERT operations
            - OrderMapper.xml: Contains stored procedure calls

        3.2 Performance Metrics:
            - Track processing time per file
            - Record classification accuracy
            - Monitor conversion success rate

    4. Final Step:
        4.1 Update Status:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 3: Completed"

  Step 4. Perform xmllint validation on all {MAPPER_TGTL1_DIR}/*{TRANSFORM_SUFFIX}*.xml files

    1. Initial Setup:
        1.1 Status Update:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 4: In Progress"

    2. Target File Verification:
        2.1 Command Execution:
            - Command: ls {MAPPER_TGTL1_DIR}/*{TRANSFORM_SUFFIX}*.xml | sort
            - Purpose: Confirm list of files for validation

    3. XML Validation Process:
        Detailed instructions are documented in SQLTransformTargetXMLValidation.txt, but currently this step should be skipped and not performed

    4. Completion:
        4.1 Status Update:
            - Location: {L1FolderName}/status.txt
            - Content: "Step 4: Completed"

# GENERAL SOURCE TO TARGET CONVERSION RULES

## Common Conversion Rules (Database-Independent):

### A. Structural Processing:
1. TABLE() Function Removal:
   - Remove TABLE() wrapper completely: TABLE(func()) ‚Üí func()
   - Preserve all function parameters exactly

2. Stored Procedure Conversion:
   - Remove curly braces: {call PROC()} ‚Üí CALL PROC()
   - Convert Source package.procedure to package_procedure format

3. Database Link Removal:
   - Remove @DBLINK suffixes from all objects

### B. JOIN Syntax Standardization:
- Convert comma-separated JOINs to explicit JOINs
- Move WHERE clause JOIN conditions to ON clauses
- Convert Source (+) outer joins to LEFT/RIGHT JOINs

# PROCESSING ENFORCEMENT

VIOLATION DETECTION: If you think about "batch", "multiple files", "efficient processing", "systematic", "remaining", "bulk", "similar", "pattern", "streamline", "optimize" ‚Üí STOP and process ONE file only.

CORRECTION: If you catch yourself trying to process multiple files, acknowledge it and focus on the current single file only.

# PROCESSING NOTE:
This file provides general Source to Target SQL conversion guidelines with structured task progression.
Database-specific rules are applied based on TARGET_DBMS_TYPE environment variable.
WHERE clause bind variable CAST processing is performed as the final step for optimal results.
