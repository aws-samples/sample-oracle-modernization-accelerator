Reference: Apply environment information from $OMA_HOME/bin/application/environment_context.txt

목표: Oracle → PostgreSQL 마이그레이션을 위한 AI 기반 종합 애플리케이션 분석

작업 환경:
- 소스 디렉토리: $JAVA_SOURCE_FOLDER
- 결과 저장 위치: $APPLICATION_FOLDER/
- 도구 디렉토리: $APP_TOOLS_FOLDER/

분석 범위 및 실행 단계:

1단계: 애플리케이션 기본 정보 수집 및 시스템 아키텍처 분석
   - 프로젝트 타입 파악 (Maven/Gradle/Traditional)
   - 프레임워크 및 기술 스택 분석
   - Java 버전 및 의존성 라이브러리 확인
   - 디렉토리 구조 분석
   - **상세 시스템 아키텍처 분석**:
     * 애플리케이션 레이어 구조 (Presentation, Business, Data Access, Integration)
     * 모듈별 의존성 관계 및 패키지 구조
     * 설정 파일 분석 (Spring Context, MyBatis Config, Database Config)
     * 외부 시스템 연동 현황 (Web Service, REST API, Database Link)
     * 보안 아키텍처 (Spring Security, 인증/인가 방식)
     * 트랜잭션 관리 방식 및 데이터소스 구성
     * 로깅 및 모니터링 구성
     * 배포 아키텍처 (WAR/JAR, 서버 구성)
     * 캐시 사용 현황 (EhCache, Redis 등)
     * 메시징 시스템 사용 현황 (JMS, MQ 등)
   - **기술 스택 호환성 분석**:
     * 각 프레임워크 버전의 PostgreSQL/MySQL 호환성
     * 레거시 라이브러리 식별 및 업그레이드 필요성
     * Oracle 특화 라이브러리 의존성 분석

2단계: MyBatis XML 매퍼 파일 전수 분석
   - 매퍼 파일 검색 우선순위:
     1. $JAVA_SOURCE_FOLDER/**/main/resources/mapper/*.xml
     2. $JAVA_SOURCE_FOLDER/**/WEB-INF/classes/sqlmap/*.xml  
     3. $JAVA_SOURCE_FOLDER/**/*.xml (mapper, sqlmap, dao 포함)
   - 모든 XML 매퍼 파일 목록 생성 (Mapperlist.csv)
   - **매퍼 파일 통계 분석**:
     * 모듈별 매퍼 파일 분포 (패키지/디렉토리 기준)
     * 파일 크기별 분포 (Small/Medium/Large)
     * 복잡도별 파일 분포 (Simple/Moderate/Complex/High Risk)
     * 비즈니스 도메인별 분류 (예: air, hotel, common, admin 등)
   - Oracle 특화 패턴 검출 및 복잡도 평가
   - 가능한 경우 $APP_TOOLS_FOLDER/appDiscovery-utils.sh 활용
   - 새로운 6단계 복잡도 체계 적용: Critical(15점), High(10점), Medium-High(7점), Medium(5점), Low(2점), Minimal(1점)
   - 상세 분석 결과를 Oracle_Pattern_Analysis.txt에 저장
   - 파일별 복잡도 점수를 Oracle_Complexity_Summary.csv에 저장
   - **신규 추가**: Oracle_Complexity_Detail.csv 생성
     * 형식: MapperFile,PatternType,PatternName,Occurrences,LineNumbers,ConversionDifficulty,BusinessImpact,ActualCode
     * 각 패턴별 상세 정보: 발생 건수, 라인 번호, 실제 SQL 코드, 변환 난이도, 비즈니스 영향도
     * 예시: "TbAirBt100Mapper_Custom.xml","Critical","DBMS_CRYPTO.ENCRYPT",2,"45,67","High - Custom Function Required","Security Logic","DBMS_CRYPTO.ENCRYPT(password, key)"

3단계: 설정 파일 검색 및 JNDI 정보 추출
   - 설정 파일 검색 우선순위:
     1. $JAVA_SOURCE_FOLDER/**/*dev*.yml (개발 환경 설정 우선)
     2. $JAVA_SOURCE_FOLDER/**/main/resources/*.yml, *.yaml, *.properties
     3. $JAVA_SOURCE_FOLDER/**/WEB-INF/classes/*.xml, *.properties
     4. $JAVA_SOURCE_FOLDER/**/WEB-INF/*.xml
   - JNDI 변환 대상 확인:
     * 환경 변수 $TRANSFORM_JNDI에 정의된 JNDI 목록과 비교
     * 일치하는 JNDI는 Transform='Yes'로 설정
     * 일치하지 않는 JNDI는 Transform='No'로 설정

4단계: Java 소스 Oracle 의존성 분석
   - Oracle JDBC 드라이버 사용 현황
     * oracle.jdbc.* 패키지 import 분석
     * OracleDriver, OracleConnection, OracleStatement 사용
     * Oracle JDBC URL 패턴 (jdbc:oracle:thin:@)
   - Oracle 특화 데이터 타입 사용 분석
     * 기본 타입: CLOB, BLOB, NCLOB, BFILE
     * Oracle SQL 타입: oracle.sql.ARRAY, oracle.sql.STRUCT, oracle.sql.REF
     * 시간 타입: oracle.sql.TIMESTAMP, oracle.sql.INTERVALDS, oracle.sql.INTERVALYM
     * 기타 타입: oracle.sql.ROWID, oracle.sql.RAW
   - Oracle Sequence 호출 패턴
     * .NEXTVAL, .CURRVAL 직접 호출
     * SequenceGenerator 어노테이션 사용
   - Oracle 예외 처리 코드
     * ORA- 에러 코드 처리
     * oracle.jdbc.OracleDatabaseException
     * SQLException의 Oracle 특화 에러 처리
   - Oracle 특화 어노테이션 및 프레임워크
     * Oracle UCP: oracle.ucp.jdbc.PoolDataSource
     * Oracle ADF: oracle.adf.model.binding.*
     * Oracle Coherence: oracle.coherence.*
     * @OracleConnectionPool, @OracleADF 등 커스텀 어노테이션
   - Oracle 특화 SQL 힌트 및 최적화
     * Java 코드 내 Oracle 힌트 사용 (/*+ FIRST_ROWS */, /*+ INDEX */, /*+ PARALLEL */)
     * Oracle 옵티마이저 힌트 패턴 분석
     * 성능 최적화 관련 Oracle 특화 코드
   - Oracle 특화 배치 처리
     * OraclePreparedStatement.setExecuteBatch() 사용
     * Oracle JDBC 배치 크기 설정
     * 대용량 데이터 처리를 위한 Oracle 특화 배치 로직
   - Oracle 특화 트랜잭션 처리
     * Oracle 분산 트랜잭션: oracle.jdbc.xa.OracleXADataSource
     * Oracle 세이브포인트: oracle.jdbc.OracleSavepoint
     * Oracle 특화 트랜잭션 격리 수준 설정
   - Oracle 특화 성능 모니터링 및 디버깅
     * oracle.jdbc.OracleConnection.getStatistics() 사용
     * oracle.jdbc.driver.OracleLog 로깅
     * Oracle 실행 계획 조회: OracleResultSet.getExecutionPlan()
   - Oracle 특화 보안 및 암호화
     * Oracle Wallet 사용 코드
     * Oracle 데이터 암호화/복호화 함수 호출
     * Oracle 특화 인증 및 권한 처리
   - Oracle 특화 JSON 및 XML 처리
     * Oracle JSON 함수 사용 (JSON_VALUE, JSON_QUERY 등)
     * Oracle XMLType 처리 코드
     * Oracle 특화 데이터 변환 로직
   - 분석 결과를 Java_Oracle_Analysis.txt에 저장
   - **신규 추가**: Java_Oracle_Detail.csv 생성
     * 형식: JavaFile,PatternType,PatternName,Occurrences,LineNumbers,ConversionDifficulty,BusinessImpact,ActualCode
     * 각 Java 의존성별 상세 정보: 발생 건수, 라인 번호, 실제 Java 코드, 변환 난이도, 비즈니스 영향도
     * 예시: "AirReservationMaster_ServiceImpl.java","Medium","Oracle JDBC Driver",1,"9259","Medium - Driver Change Required","Database Connection","oracle.jdbc.OracleDriver"

5단계: JNDI 설정 분석 및 CSV 생성
   - JNDI 데이터소스 구성 분석
   - 설정 파일에서 JNDI 관련 정보 추출
   - JNDI 정보 추출 및 CSV 생성:
     * 파일명: $APPLICATION_FOLDER/JNDI.csv
     * 형식: JNDI,Description,useyn,Transform
     * 규칙: $TRANSFORM_JNDI와 일치하는 JNDI이면 Transform='Yes'
     * 찾은 설정 파일들에서 JNDI 관련 정보 추출
   - 매퍼 파일과 JNDI 연관 관계 파악
   - MapperAndJndi.csv 생성:
     * 파일명: $APPLICATION_FOLDER/MapperAndJndi.csv
     * 형식: MapperFile,JNDI,UsageType
     * 매퍼 파일에서 사용되는 JNDI 참조 추출

6단계: AI 기반 종합 HTML 리포트 생성
   - $APP_TOOLS_FOLDER/appDiscovery-template.html CSS 템플릿 활용
   - [DYNAMIC_CONTENT] 플레이스홀더를 실제 분석 결과로 동적 교체
   - 실제 분석 결과 기반 동적 컨텐츠 생성 (하드코딩 금지)
   - HTML 구조 동적 생성:
     * 헤더 섹션: 애플리케이션 정보 및 생성 일시
     * **시스템 아키텍처 개요**: 상세 아키텍처 분석 결과 표시
       - 애플리케이션 아키텍처 다이어그램 (텍스트 기반)
       - 레이어별 구성 요소 및 역할
       - 모듈별 의존성 매트릭스
       - 기술 스택 상세 정보 (버전, PostgreSQL/MySQL 호환성, 업그레이드 필요성)
       - 외부 시스템 연동 현황 테이블
       - 데이터소스 및 JNDI 구성 정보
       - 보안 아키텍처 구성
       - 성능 및 확장성 고려사항
     * **SQL XML Mapper Summary**: 매퍼 파일 통계 및 분포 분석
       - 총 매퍼 파일 수 및 모듈별 분포 테이블
       - 복잡도별 파일 분포 차트 (Simple/Moderate/Complex/High Risk)
       - 비즈니스 도메인별 매퍼 분류 및 설명
       - 파일 크기별 분포 (라인 수 기준)
       - Oracle 패턴 사용 빈도별 매퍼 분류
     * **Oracle 패턴 분석 결과**: Oracle_Complexity_Detail.csv 기반 상세 테이블 생성
     * Java Oracle 의존성 분석: 실제 Java 코드 분석 결과
     * JNDI 설정 분석: 실제 JNDI 구성 정보 (상위 10개만 표시)
     * 종합 분석 요약: AI 기반 마이그레이션 권장사항
     * 푸터: 분석 메타데이터
   - 조건부 섹션 생성:
     * Oracle 패턴이 발견되지 않은 경우 "해당 없음" 표시
     * JNDI 설정이 없는 경우 경고 메시지 표시
     * Java Oracle 의존성이 없는 경우 "Clean" 상태 표시
   - **상세 테이블 생성 규칙**:
     * 모든 Oracle 패턴과 Java 의존성은 실제 분석 결과만 표시
     * 패턴별 파일건수, 발생건수 표시 // 파일 1개의 세부 예시 포함
     * 실제 코드 예시는 10 Line 내에서 표시. 핵심 코드는 표시 되어야 함
     * 테이블이 길어져도 완전한 정보 제공 우선
     * 발견되지 않은 패턴은 테이블 자체를 생성하지 않음
   - Discovery-Report.html 생성

Oracle 패턴 분석 상세 범위:

Critical 패턴 (15점) - 아키텍처 변경 필요:
- Database Links (@dblink)
- Encryption Functions (DBMS_CRYPTO, DBMS_OBFUSCATION)
- DBMS Packages (DBMS_OUTPUT, DBMS_LOB, DBMS_XMLGEN, etc.)
- PL/SQL Blocks (BEGIN/END, DECLARE, PROCEDURE, FUNCTION)
- XML Functions (XMLType, XMLQuery, XMLTable, XMLElement)
- Hierarchical Functions (SYS_CONNECT_BY_PATH, CONNECT_BY_ROOT)
- Advanced Security (VPD, RLS, Fine-Grained Auditing)
- Flashback Queries (AS OF TIMESTAMP, VERSIONS BETWEEN)
- MODEL Clause (복잡한 스프레드시트 형태 쿼리)

High 복잡도 패턴 (10점) - 복잡한 로직 변환:
- Hierarchical Queries (CONNECT BY with complex conditions)
- Advanced Aggregate Functions (LISTAGG, XMLAGG, COLLECT)
- MERGE Statements (복잡한 조건 포함)
- Oracle Outer Joins (+) with multiple tables
- Regular Expressions (REGEXP_LIKE, REGEXP_SUBSTR, REGEXP_REPLACE)
- Advanced Analytics Functions (PERCENTILE_CONT, PERCENTILE_DISC, CUME_DIST, PERCENT_RANK)
- Window Functions with complex partitioning (LAG, LEAD, FIRST_VALUE, LAST_VALUE, NTILE)
- Statistical Functions (STDDEV, VARIANCE, CORR, COVAR_POP, COVAR_SAMP)
- Oracle Hints with performance impact (/*+ PARALLEL */, /*+ INDEX */)
- Advanced SQL Structures (CUBE, ROLLUP, GROUPING SETS)

Medium-High 복잡도 패턴 (7점) - 상당한 변환 작업:
- Complex DECODE with nested conditions
- Advanced Date Functions (ADD_MONTHS, MONTHS_BETWEEN, NEXT_DAY, LAST_DAY)
- Oracle 특화 변환 함수 (TO_BINARY_DOUBLE, TO_BINARY_FLOAT, HEXTORAW, RAWTOHEX)
- Collection Operations (MEMBER OF, SUBMULTISET OF)
- Advanced String Functions (SOUNDEX, METAPHONE, COMPOSE, DECOMPOSE, UNISTR)
- Oracle 특화 수학 함수 (BITAND, BITOR, BITXOR, LN, LOG, EXP)
- JSON Functions (JSON_VALUE, JSON_QUERY, JSON_TABLE) - Oracle 12c+

Medium 복잡도 패턴 (5점) - 표준 변환 작업:
- Common Oracle Functions (NVL, NVL2, SUBSTR, INSTR, LENGTH)
- Basic Date Functions (TO_DATE, TO_CHAR, SYSDATE, SYSTIMESTAMP, EXTRACT, TRUNC)
- String Functions (LTRIM, RTRIM, LPAD, RPAD, REPLACE, TRANSLATE, UPPER, LOWER, INITCAP)
- Numeric Functions (ROUND, CEIL, FLOOR, MOD, POWER, SQRT, ABS, SIGN)
- Conditional Functions (NULLIF, COALESCE, simple CASE WHEN)
- Conversion Functions (TO_NUMBER, TO_TIMESTAMP, CAST, CONVERT)
- Sequences (.NEXTVAL, .CURRVAL)
- Basic CONNECT BY (simple hierarchical queries)
- Oracle Operators (|| concatenation, PRIOR)

Low 복잡도 패턴 (2점) - 단순 변환:
- FROM DUAL
- Basic ROWNUM usage
- Simple Oracle data types (VARCHAR2, NUMBER, DATE)
- Extended Data Types (LONG, RAW, UROWID)
- Basic Oracle Hints (/*+ FIRST_ROWS */)

Minimal 패턴 (1점) - 거의 영향 없음:
- 주석 처리된 Oracle 코드
- 사용되지 않는 Oracle 구문
- Oracle 관련 상수 정의만 존재

Java Oracle 의존성 복잡도 점수 체계:

Critical Java 패턴 (10점):
- Oracle UCP (Universal Connection Pool) 사용
- Oracle ADF (Application Development Framework) 의존성
- Oracle Coherence 캐시 사용
- Oracle 분산 트랜잭션 (XA) 사용
- Oracle Wallet 및 고급 보안 기능
- Oracle 특화 성능 모니터링 API 사용

High Java 패턴 (5점):
- Oracle 특화 데이터 타입 (ARRAY, STRUCT, REF, TIMESTAMP)
- Oracle 특화 배치 처리 (setExecuteBatch)
- Oracle SQL 힌트를 포함한 동적 쿼리
- Oracle 세이브포인트 및 고급 트랜잭션 제어
- Oracle XMLType 및 JSON 특화 처리
- Oracle 실행 계획 조회 및 성능 분석

Medium Java 패턴 (3점):
- 기본 Oracle JDBC 드라이버 사용
- Oracle 기본 데이터 타입 (CLOB, BLOB, ROWID)
- Oracle Sequence 직접 호출
- Oracle 특화 예외 처리 (ORA- 에러 코드)
- Oracle JDBC URL 하드코딩

Low Java 패턴 (1점):
- Oracle import 구문만 존재 (실제 사용 없음)
- 주석 처리된 Oracle 관련 코드
- Oracle 관련 상수 정의만 존재

마이그레이션 복잡도 등급:
- Level 1 (Simple): ≤30점 → 1-2 weeks
- Level 2 (Moderate): 31-80점 → 3-4 weeks  
- Level 3 (Complex): 81-150점 → 2-3 months
- Level 4 (High Risk): 151-300점 → 3-4 months
- Level 5 (Critical): 301-500점 → 6-9 months
- Level 6 (Extreme): >500점 → 12+ months

AI 분석 지침:
- 모든 분석은 실제 파일 기반으로 수행 (하드코딩 금지)
- 발견되지 않은 패턴은 "해당 없음"으로 표시
- HTML 리포트는 가독성을 위해 유형별 대표 예시만 표시
- 전체 상세 결과는 텍스트 파일에 저장
- 실용적인 마이그레이션 권장사항 및 타임라인 제시
- 위험도가 높은 패턴에 대한 구체적인 변환 가이드 제공

동적 HTML 생성 상세 지침:
- appDiscovery-template.html의 [DYNAMIC_CONTENT] 플레이스홀더를 실제 분석 결과로 교체
- 실제 파일 검색 결과를 기반으로 HTML 구조 동적 생성
- 조건부 렌더링: 데이터 유무에 따른 섹션 표시/숨김
- 실시간 파일 예시 추출: 하드코딩된 파일명 사용 금지
- 복잡도 점수 실시간 계산 및 표시
- 6단계 복잡도 체계 적용한 시각적 대시보드 생성
- 반응형 디자인을 위한 CSS 클래스 활용
- 테이블 크기 최적화 규칙:
  * Oracle 패턴 분석: 모든 세부 유형 전체 표시 (발견된 패턴만)
  * Java Oracle 의존성: 모든 세부 유형 전체 표시 (발견된 의존성만)
  * JNDI 설정 목록: 상위 10개 항목만 표시하고 나머지는 생략 표시
  * Mapper-JNDI 연관관계: 상위 10개 항목만 표시하고 나머지는 생략 표시
- 에러 처리: 파일이 없거나 분석 실패 시 적절한 메시지 표시

생성 파일 목록:
- Mapperlist.csv (매퍼 파일 목록)
- Mapper_Statistics.csv (모듈별 매퍼 파일 통계 - 신규)
- JNDI.csv (JNDI 설정 정보)  
- MapperAndJndi.csv (매퍼-JNDI 연관 관계)
- Oracle_Pattern_Analysis.txt (상세 Oracle 패턴 분석)
- Oracle_Complexity_Summary.csv (파일별 복잡도 점수)
- Oracle_Complexity_Detail.csv (패턴별 상세 정보 - 신규)
- Java_Oracle_Analysis.txt (Java 의존성 분석)
- Java_Oracle_Detail.csv (Java 의존성별 상세 정보 - 신규)
- System_Architecture_Analysis.txt (시스템 아키텍처 상세 분석 - 신규)
- Discovery-Report.html (AI 기반 종합 HTML 리포트)

특별 지시사항:
- 전수 검사 수행: 모든 XML 매퍼 파일 분석 (샘플링 금지)
- AI 기반 패턴 인식으로 정확한 복잡도 평가
- 실제 비즈니스 영향도를 고려한 우선순위 제시
- PostgreSQL 변환 시 주의사항 및 대안 제시
- 마이그레이션 단계별 실행 계획 수립
