목표: Application의 Java Source를 분석하여 Oracle 관련한 Source 부분을 PostgreSQL로 변경하기 위한 사전 분석 작업 및 MyBatis 정보 추출

작업 디렉토리: $JAVA_SOURCE_FOLDER
결과 저장 위치: $APPLICATION_FOLDER/

작업 단계:

1. 애플리케이션 기본 정보 수집
   1.1 프로젝트 정보 파악:
       - find $JAVA_SOURCE_FOLDER -name "pom.xml" -o -name "build.gradle" -o -name "web.xml"
       - 프로젝트 유형 식별 (Maven/Gradle/Traditional Web)
       - 애플리케이션명 추출 (pom.xml의 artifactId 또는 web.xml의 display-name)
       - 프로젝트 버전 정보 수집
   
   1.2 기술 스택 분석:
       - pom.xml 또는 build.gradle에서 주요 의존성 분석
       - Spring Framework 버전 및 모듈 확인
       - Java 버전 확인
       - 웹 프레임워크 식별 (Spring MVC, Struts 등)
       - 기타 주요 라이브러리 및 프레임워크 식별
   
   1.3 디렉토리 구조 생성:
       - find 명령어를 사용하여 주요 디렉토리 구조 생성
       - 불필요한 파일들 (.class, .jar, .git 등) 제외
       - HTML 템플릿의 directory-tree 형식에 맞게 포맷팅
       - 주요 모듈별 디렉토리 구조 파악

2. MyBatis 상세 분석
   2.1 MyBatis 설정 파일 분석:
       - mybatis-config.xml, sqlMapConfig.xml 등 설정 파일 내용 파싱
       - Type Aliases 추출 및 분석
       - Settings 정보 추출 (cacheEnabled, defaultStatementTimeout 등)
       - Custom SqlSessionFactory 구현 여부 확인
       - Mapper 스캔 설정 분석
   
   2.2 MyBatis 버전 및 의존성:
       - pom.xml에서 MyBatis 버전 확인
       - MyBatis-Spring 연동 방식 분석
       - 데이터베이스 드라이버 정보 확인

3. MyBatis Mapper 목록 추출 및 분석
   3.1 Mapper 파일 목록 생성 (단계별 검색):
       
       1단계: Maven 표준 구조에서 검색
       find $JAVA_SOURCE_FOLDER -path "*/main/resources/mapper/*.xml" 2>/dev/null > /tmp/mapper_files.txt
       
       2단계: 전통적인 웹앱 구조에서 검색 (1단계 결과가 없는 경우)
       if [ ! -s /tmp/mapper_files.txt ]; then
           find $JAVA_SOURCE_FOLDER -path "*/WEB-INF/classes/sqlmap/*.xml" 2>/dev/null > /tmp/mapper_files.txt
       fi
       
       3단계: 일반적인 경로에서 MyBatis 관련 XML 파일 검색 (2단계 결과가 없는 경우)
       if [ ! -s /tmp/mapper_files.txt ]; then
           find $JAVA_SOURCE_FOLDER -name "*.xml" | grep -E "(mapper|sqlmap|dao)" -i > /tmp/mapper_files.txt
       fi
       
       4단계: 최종 CSV 파일 생성
       if [ -s /tmp/mapper_files.txt ]; then
           cat /tmp/mapper_files.txt | awk 'BEGIN {print "No.,FileName"} {print NR "," $0}' > $APPLICATION_FOLDER/Mapperlist.csv
       else
           echo "No.,FileName" > $APPLICATION_FOLDER/Mapperlist.csv
           echo "MyBatis Mapper 파일을 찾을 수 없습니다." >> $APPLICATION_FOLDER/Mapperlist.csv
       fi
       
       # 임시 파일 정리
       rm -f /tmp/mapper_files.txt

   3.2 SQL 패턴 발견 및 분석:
       
       단계 1: 모든 Mapper 파일에서 SQL 구문 추출
       - <select>, <insert>, <update>, <delete> 태그 내용 추출
       - CDATA 섹션 내용 포함하여 분석
       - 주석 및 동적 SQL 태그는 제외하고 순수 SQL만 추출
       
       단계 2: Oracle 특화 패턴 자동 발견 (복잡한 변환 패턴 우선)
       - 고위험 기능 우선 식별 (수동 검토 필요):
         * Database Link 사용 (@dblink 구문)
         * 암호화 함수 (DBMS_CRYPTO, DBMS_OBFUSCATION_TOOLKIT)
         * UTL_SMTP, UTL_MAIL 메일 관련 함수
         * DBMS_JOB, DBMS_SCHEDULER 스케줄링 함수
         * UTL_FILE 파일 처리 함수
         * XMLTYPE, XMLQuery 등 XML 처리 함수
       - 고복잡도 패턴 식별:
         * CONNECT BY 계층 쿼리 (START WITH, CONNECT BY PRIOR)
         * LISTAGG 집계 함수 (WITHIN GROUP, ORDER BY 포함)
         * DECODE 복합 조건문 (중첩된 DECODE 구문)
         * Oracle 조인 구문 (+) 사용
         * PL/SQL 블록 (BEGIN...END, DECLARE 구문)
         * MERGE 구문 (WHEN MATCHED, WHEN NOT MATCHED)
         * Oracle 정규식 함수 (REGEXP_LIKE, REGEXP_SUBSTR, REGEXP_REPLACE)
       - 중복잡도 패턴 식별:
         * Oracle 시퀀스 사용 (SEQUENCE.NEXTVAL, SEQUENCE.CURRVAL)
         * Oracle 함수 패턴 (TO_DATE, TO_CHAR, NVL, SUBSTR 등)
         * ROWNUM 사용 패턴
         * FROM DUAL 구문
         * Oracle 데이터 타입 (VARCHAR2, NUMBER, CLOB, BLOB)
       - 기타 Oracle 특화 요소들 (SYSDATE, v$session 등)
       
       단계 3: 발견된 패턴별 상세 분석
       - 각 패턴의 사용 빈도 계산 (전체 파일에서 몇 번 사용되는지)
       - 패턴을 사용하는 Mapper 파일 수 계산
       - 패턴별 복잡도 평가 (단순 치환/중간 로직 변경/복잡한 재작성 필요)
       - 실제 사용 예시 추출 (각 패턴당 1-2개의 실제 코드)
       - PostgreSQL 변환 방식 및 대안 제시
       
       단계 4: 패턴 분류 및 우선순위 설정
       - 빈도가 높은 패턴 우선 분류
       - 변환 복잡도에 따른 분류 (Low/Medium/High)
       - 비즈니스 영향도 평가
       - 변환 시 의사결정이 필요한 영역 식별 (DB Link, 암호화 함수, 커스텀 함수 등)

4. JNDI 정보 추출 및 CSV 생성
   4.1 JNDI 설정 파일 탐색 (단계별 검색):
       
       1단계: dev 환경 설정 파일 확인
       find $JAVA_SOURCE_FOLDER -name "*dev*.yml" 2>/dev/null > /tmp/config_files.txt
       
       2단계: 일반적인 설정 파일 검색 (1단계 결과가 없는 경우)
       if [ ! -s /tmp/config_files.txt ]; then
           find $JAVA_SOURCE_FOLDER -path "*/main/resources/*.yml" -o -path "*/main/resources/*.yaml" -o -path "*/main/resources/*.properties" 2>/dev/null > /tmp/config_files.txt
       fi
       
       3단계: 웹앱 구조에서 설정 파일 검색 (2단계 결과가 없는 경우)
       if [ ! -s /tmp/config_files.txt ]; then
           find $JAVA_SOURCE_FOLDER -path "*/WEB-INF/classes/*.xml" -o -path "*/WEB-INF/*.xml" -o -path "*/WEB-INF/classes/*.properties" 2>/dev/null > /tmp/config_files.txt
       fi
       
       4단계: 전체 경로에서 설정 파일 검색 (3단계 결과가 없는 경우)
       if [ ! -s /tmp/config_files.txt ]; then
           find $JAVA_SOURCE_FOLDER -name "*.yml" -o -name "*.yaml" -o -name "*.xml" -o -name "*.properties" | grep -E "(config|application|context|datasource)" -i > /tmp/config_files.txt
       fi

   4.2 JNDI 정보 추출 및 CSV 생성:
       - 파일명: $APPLICATION_FOLDER/JNDI.csv
       - 형식: JNDI,Description,useyn,Transform
       - 규칙: $TRANSFORM_JNDI와 일치하는 JNDI이면 Transform='Yes'
       - 찾은 설정 파일들에서 JNDI 관련 정보 추출

   4.3 Mapper와 JNDI 매핑 정보 생성:
       - 파일명: $APPLICATION_FOLDER/MapperAndJndi.csv
       - Mapper 파일과 사용되는 JNDI 정보 매핑
       
   # 임시 파일 정리
   rm -f /tmp/config_files.txt

결과 파일 생성:

1. CSV 파일들:
   - $APPLICATION_FOLDER/Mapperlist.csv
   - $APPLICATION_FOLDER/JNDI.csv
   - $APPLICATION_FOLDER/MapperAndJndi.csv

2. 통합 분석 리포트 (단계별 점진적 생성):
   - 분석 리포트 파일명: $APPLICATION_FOLDER/Discovery-Report.html
   - 결과 내용은 한글로 작성
   - 참조 템플릿 화일 $APP_TOOLS_FOLDER/AppDiscoveryTemplate.html을 기반으로 사용

ApplicationReport.html 단계별 생성 지시:

1단계: 기본 구조 및 시스템 정보 생성
   - AppDiscoveryTemplate.html의 헤더, CSS, 기본 틀 복사
   - 제목을 "Application Analysis Report - Oracle to PostgreSQL Migration Analysis"로 설정
   - System Architecture Overview 섹션 생성:
     * [Application Name]을 실제 프로젝트명으로 교체
     * Technology Stack의 [Framework], [Database], [Libraries] 등을 실제 의존성 분석 결과로 교체
     * Directory Structure를 실제 디렉토리 구조로 교체 (HTML 스타일링 포함)
     * Key Features를 실제 애플리케이션 특징으로 교체

2단계: 데이터베이스 설정 정보 추가
   - Database Configuration Analysis 섹션 추가:
     * [Database Framework]를 실제 MyBatis 설정으로 교체
     * Database Configuration Files 테이블을 실제 발견된 설정 파일들로 교체
     * Database Configuration Features의 Type Aliases, Main Settings를 실제 설정으로 교체
     * "Total [N] Database Mapper Files"를 실제 Mapper 파일 수로 교체
     * Mapper Files by Module 테이블에 Mapperlist.csv 내용을 모듈별로 분류하여 반영
     * JNDI 설정 정보를 별도 테이블로 추가 (JNDI.csv 내용을 HTML 테이블로 변환)

3단계: SQL 패턴 분석 결과 추가
   - Database Query Pattern Analysis 섹션 추가:
     * "Oracle-specific database query patterns" 분석 목표 명시
     * Oracle Pattern Analysis Results Examples 테이블을 실제 발견된 패턴으로 교체
     * 각 패턴의 빈도, 복잡도(Low/Medium/High 배지 사용), 변환 상태 표시
     * 고복잡도 패턴 우선 표시 (CONNECT BY, LISTAGG, PL/SQL, MERGE 등)
     * Query Conversion Examples를 실제 발견된 복잡한 SQL 예시로 교체:
       - [Pattern Name] Conversion을 실제 패턴명으로 교체
       - Oracle 코드 블록(빨간 배경)에 실제 Oracle SQL 예시
       - PostgreSQL 코드 블록(파란 배경)에 변환된 PostgreSQL SQL 예시
       - 💡 Conversion Notes에 실제 변환 주의사항 추가
     * Migration Considerations에 실제 마이그레이션 고려사항 추가

4단계: 고위험 Oracle 기능 분석 추가
   - High-Risk Oracle Features Analysis 섹션 추가:
     * Database Link Usage 테이블:
       - XML File, SQL ID, SQL Statement, DB Link 컬럼으로 구성
       - @dblink 사용하는 모든 SQL 구문을 XML 파일별로 정리
     * Encryption Functions 테이블:
       - DBMS_CRYPTO, DBMS_OBFUSCATION_TOOLKIT 등 암호화 함수 사용 현황
       - XML File, SQL ID, SQL Statement, Encryption Function 컬럼으로 구성
     * UTL_SMTP and Mail Functions 테이블:
       - UTL_SMTP, UTL_MAIL 등 메일 관련 함수 사용 현황
       - XML File, SQL ID, SQL Statement, Mail Function 컬럼으로 구성
     * Other High-Risk Features 테이블:
       - DBMS_JOB, DBMS_SCHEDULER, UTL_FILE, XMLTYPE 등 기타 고위험 기능
       - XML File, SQL ID, SQL Statement, Feature Type 컬럼으로 구성
     * Action Required 경고 박스에 각 기능별 대응 방안 명시

5단계: 분석 요약 및 마무리
   - Analysis Summary 섹션 추가:
     * Migration Analysis Results를 실제 분석 결과 통계로 교체:
       - "Total [N] database mapper files analyzed"를 실제 수치로
       - "[N] pattern types identified for conversion"을 실제 패턴 수로
       - "Estimated conversion points: [N] locations"를 실제 변환 포인트 수로
       - "Migration complexity: [Low/Medium/High]"를 실제 복잡도로
     * Conversion Statistics 카드에 실제 변환 통계 반영
     * Next Steps는 템플릿 그대로 유지
   - 푸터 정보 업데이트:
     * [Analysis Date]를 현재 날짜로 설정
     * [Application Name]을 실제 애플리케이션명으로 설정
   - HTML 파일 완성 및 검증

주의 사항:
- 각 단계별로 점진적으로 HTML 파일을 구성하여 처리 부하 분산
- 지시 사항 이외의 별도 파일 생성 금지
- 모든 CSV 파일의 내용은 Discovery-Report.html에도 테이블 형태로 포함
- 생성된 CSV 파일들은 후속 변환 작업에서 참조됨
- 실제 분석 데이터만 사용하고 샘플/예시 데이터는 사용 금지
- 발견되지 않은 패턴이나 설정은 "해당 없음" 또는 "발견되지 않음"으로 표시
- Oracle/PostgreSQL 코드 예시는 템플릿의 색상 구분 스타일 적용 (빨간/파란 배경)
- 디렉토리 구조는 HTML 스타일링을 적용하여 가독성 향상
- 최종적으로 하나의 완성된 $APPLICATION_FOLDER/Discovery-Report.html 파일 생성
