DB07.CreateSQLListTable.py 프로그램을 작성해주세요. 이 프로그램은 PostgreSQL 데이터베이스에 SQL 문을 저장하고 관리하기 위한 테이블을 생성하는 프로그램입니다.

요구사항:
1. PostgreSQL 데이터베이스에 연결합니다.
2. 환경 변수에서 PostgreSQL 연결 정보를 가져옵니다 (PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD).
3. 'sqllist' 테이블을 생성합니다. 이 테이블은 다음 컬럼을 포함합니다:
   - sql_id: SQL 문의 고유 식별자 (기본 키)
   - app_name: 애플리케이션 이름
   - stmt_type: SQL 문 타입 (S: Select, I: Insert, U: Update, D: Delete, P: PL/SQL Block, O: Other)
   - orcl_file_path: Oracle SQL 파일 경로
   - pg_file_path: PostgreSQL SQL 파일 경로
   - orcl: Oracle SQL 문
   - pg: PostgreSQL SQL 문
   - orcl_result: Oracle 실행 결과
   - pg_result: PostgreSQL 실행 결과
   - same: 두 결과가 같은지 여부 (Y/N)
   - execution_time: SQL 실행 시간 (밀리초)
   - error_message: 오류 메시지 (있는 경우)
   - created_at: 레코드 생성 시간
   - updated_at: 레코드 업데이트 시간
4. 테이블이 이미 존재하는 경우 DROP 후 재생성하는 옵션을 제공합니다.
5. 테이블 생성 후 인덱스를 생성합니다:
   - sql_id에 대한 기본 키 인덱스
   - app_name에 대한 인덱스
   - stmt_type에 대한 인덱스
   - same에 대한 인덱스

PostgreSQL 연결 함수:
```python
def connect_to_postgres():
    """
    환경 변수에서 연결 정보를 가져와 PostgreSQL에 연결합니다.
    
    Returns:
        psycopg2.connection: PostgreSQL 연결 객체
    
    Raises:
        Exception: 연결 실패 시 예외 발생
    """
    try:
        # 환경 변수에서 연결 정보 가져오기
        host = os.environ.get('PGHOST', 'localhost')
        port = os.environ.get('PGPORT', '5432')
        database = os.environ.get('PGDATABASE', 'postgres')
        user = os.environ.get('PGUSER', 'postgres')
        password = os.environ.get('PGPASSWORD', '')
        
        # 연결 문자열 생성
        conn_string = f"host={host} port={port} dbname={database} user={user} password={password}"
        
        # 연결
        conn = psycopg2.connect(conn_string)
        return conn
    except Exception as e:
        print(f"PostgreSQL 연결 오류: {e}")
        raise
```

테이블 존재 여부 확인 함수:
```python
def table_exists(conn, table_name):
    """
    테이블이 존재하는지 확인합니다.
    
    Args:
        conn (psycopg2.connection): PostgreSQL 연결 객체
        table_name (str): 확인할 테이블 이름
        
    Returns:
        bool: 테이블 존재 여부
    """
    with conn.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public'
                AND table_name = %s
            )
        """, (table_name,))
        return cursor.fetchone()[0]
```

테이블 생성 SQL:
```sql
CREATE TABLE sqllist (
    sql_id VARCHAR(100) PRIMARY KEY,
    app_name VARCHAR(100),
    stmt_type CHAR(1),
    orcl_file_path VARCHAR(500),
    pg_file_path VARCHAR(500),
    orcl TEXT,
    pg TEXT,
    orcl_result TEXT,
    pg_result TEXT,
    same CHAR(1),
    execution_time INTEGER,
    error_message TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_sqllist_app_name ON sqllist(app_name);
CREATE INDEX idx_sqllist_stmt_type ON sqllist(stmt_type);
CREATE INDEX idx_sqllist_same ON sqllist(same);
```

테이블 생성 함수:
```python
def create_sqllist_table(conn, drop_if_exists=False):
    """
    sqllist 테이블을 생성합니다.
    
    Args:
        conn (psycopg2.connection): PostgreSQL 연결 객체
        drop_if_exists (bool): 테이블이 존재하면 DROP 후 재생성할지 여부
        
    Returns:
        bool: 테이블 생성 성공 여부
    """
    try:
        with conn.cursor() as cursor:
            # 테이블 존재 여부 확인
            if table_exists(conn, 'sqllist'):
                if drop_if_exists:
                    print("sqllist 테이블이 이미 존재합니다. DROP 후 재생성합니다.")
                    cursor.execute("DROP TABLE sqllist CASCADE;")
                else:
                    print("sqllist 테이블이 이미 존재합니다. --drop 옵션을 사용하여 재생성할 수 있습니다.")
                    return False
            
            # 테이블 생성
            cursor.execute("""
                CREATE TABLE sqllist (
                    sql_id VARCHAR(100) PRIMARY KEY,
                    app_name VARCHAR(100),
                    stmt_type CHAR(1),
                    orcl_file_path VARCHAR(500),
                    pg_file_path VARCHAR(500),
                    orcl TEXT,
                    pg TEXT,
                    orcl_result TEXT,
                    pg_result TEXT,
                    same CHAR(1),
                    execution_time INTEGER,
                    error_message TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
            """)
            
            # 인덱스 생성
            cursor.execute("CREATE INDEX idx_sqllist_app_name ON sqllist(app_name);")
            cursor.execute("CREATE INDEX idx_sqllist_stmt_type ON sqllist(stmt_type);")
            cursor.execute("CREATE INDEX idx_sqllist_same ON sqllist(same);")
            
            conn.commit()
            print("sqllist 테이블 및 인덱스가 성공적으로 생성되었습니다.")
            return True
    except Exception as e:
        conn.rollback()
        print(f"테이블 생성 오류: {e}")
        return False
```

테이블 정보 출력 함수:
```python
def print_table_info(conn):
    """
    생성된 테이블과 인덱스 정보를 출력합니다.
    
    Args:
        conn (psycopg2.connection): PostgreSQL 연결 객체
    """
    try:
        with conn.cursor() as cursor:
            # 테이블 컬럼 정보 조회
            cursor.execute("""
                SELECT column_name, data_type, character_maximum_length
                FROM information_schema.columns
                WHERE table_name = 'sqllist'
                ORDER BY ordinal_position;
            """)
            columns = cursor.fetchall()
            
            print("\n=== sqllist 테이블 구조 ===")
            for column in columns:
                col_name, data_type, max_length = column
                type_info = f"{data_type}"
                if max_length:
                    type_info += f"({max_length})"
                print(f"{col_name}: {type_info}")
            
            # 인덱스 정보 조회
            cursor.execute("""
                SELECT indexname, indexdef
                FROM pg_indexes
                WHERE tablename = 'sqllist';
            """)
            indexes = cursor.fetchall()
            
            print("\n=== sqllist 테이블 인덱스 ===")
            for index in indexes:
                index_name, index_def = index
                print(f"{index_name}: {index_def}")
    except Exception as e:
        print(f"테이블 정보 조회 오류: {e}")
```

오류 처리:
1. 데이터베이스 연결 오류 처리:
   ```python
   try:
       conn = connect_to_postgres()
   except Exception as e:
       print(f"PostgreSQL 연결 실패: {e}")
       print("환경 변수 PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD가 올바르게 설정되어 있는지 확인하세요.")
       sys.exit(1)
   ```

2. 테이블 생성 권한 오류 처리:
   ```python
   try:
       success = create_sqllist_table(conn, args.drop)
   except psycopg2.errors.InsufficientPrivilege:
       print("오류: 테이블을 생성할 권한이 없습니다. 데이터베이스 관리자에게 문의하세요.")
       sys.exit(1)
   ```

3. 기타 예외 처리:
   ```python
   try:
       # 코드 실행
   except psycopg2.Error as e:
       print(f"PostgreSQL 오류: {e}")
       sys.exit(1)
   except Exception as e:
       print(f"예상치 못한 오류: {e}")
       sys.exit(1)
   finally:
       if conn:
           conn.close()
   ```

사용 예시:
```
# 기본 사용법 (테이블이 존재하면 오류 발생)
python3 DB07.CreateSQLListTable.py

# 테이블이 존재하면 DROP 후 재생성
python3 DB07.CreateSQLListTable.py --drop

# 테이블 생성 SQL만 출력하고 실행하지 않음
python3 DB07.CreateSQLListTable.py --print-only

# 연결 정보 직접 지정
python3 DB07.CreateSQLListTable.py --host localhost --port 5432 --dbname mydb --user myuser --password mypass

# 상세 로깅 활성화
python3 DB07.CreateSQLListTable.py --verbose
```

프로그램은 테이블 생성 결과를 출력하고, 생성된 테이블과 인덱스 정보를 보여줍니다.
