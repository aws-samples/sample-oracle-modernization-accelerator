DB01.GetDDL.sh 스크립트를 작성해주세요. 이 스크립트는 Oracle과 PostgreSQL 데이터베이스에서 테이블 DDL을 추출하여 하나의 파일에 통합하는 스크립트입니다.

요구사항:
1. 스크립트는 두 단계로 실행됩니다:
   - 첫 번째 단계: Oracle 데이터베이스에서 DDL 추출
   - 두 번째 단계: PostgreSQL 데이터베이스에서 DDL 추출 및 Oracle DDL 파일에 추가

2. Oracle DDL 추출:
   - 환경 변수에서 Oracle 연결 정보를 가져옵니다 (ORACLE_ADM_USER, ORACLE_ADM_PASSWORD, ORACLE_SID)
   - DBMS_METADATA.GET_DDL을 사용하여 테이블 DDL을 추출합니다
   - 불필요한 속성(STORAGE, TABLESPACE, SEGMENT_ATTRIBUTES 등)은 제외합니다
   - 각 테이블에 대해 샘플 데이터(첫 번째 행)를 CSV 형식으로 추출합니다
   - 각 테이블마다 별도의 SQL 파일을 생성합니다

3. PostgreSQL DDL 추출:
   - 환경 변수에서 PostgreSQL 연결 정보를 가져옵니다 (PGUSER, PGPASSWORD, PGHOST, PGPORT, PGDATABASE)
   - pg_get_tabledef 함수를 사용하여 테이블 DDL을 추출합니다
   - 추출된 DDL을 Oracle DDL 파일에 추가합니다
   - 시스템 테이블('awsdms_validation_failures_v1', 'sqllist')은 제외합니다

4. pg_get_tabledef 함수 처리:
   - PostgreSQL에 pg_get_tabledef 함수가 없는 경우 자동으로 생성합니다
   - 함수 정의:
   ```sql
   CREATE OR REPLACE FUNCTION pg_get_tabledef(schema_name text, table_name text, include_comments boolean DEFAULT true)
   RETURNS text AS $$
   DECLARE
       table_def text;
       column_list text := '';
       r record;
   BEGIN
       -- 컬럼 정의 가져오기
       FOR r IN SELECT column_name, data_type, character_maximum_length, is_nullable
                FROM information_schema.columns
                WHERE table_schema = schema_name AND table_name = table_name
                ORDER BY ordinal_position LOOP
           column_list := column_list || '    ' || r.column_name || ' ' || r.data_type;
           -- 문자열 길이 추가
           IF r.character_maximum_length IS NOT NULL THEN
               column_list := column_list || '(' || r.character_maximum_length || ')';
           END IF;
           -- NULL 여부 추가
           IF r.is_nullable = 'NO' THEN
               column_list := column_list || ' NOT NULL';
           END IF;
           column_list := column_list || ',
   ';
       END LOOP;
       
       -- 마지막 컴마 제거
       column_list := substring(column_list, 1, length(column_list) - 3);
       
       -- 테이블 정의 생성
       table_def := 'CREATE TABLE ' || schema_name || '.' || table_name || ' (
   ' || column_list || '
   );';
       
       RETURN table_def;
   END;
   $$ LANGUAGE plpgsql;
   ```

5. 출력 파일 형식:
   - 파일 위치: $OMA_ASSESSMENT/tab_ddl 디렉토리
   - 파일명: 테이블명.sql
   - 파일 내용:
     * Oracle DDL (/** Source - Oracle DDL **/ 주석으로 시작)
     * 샘플 데이터 (/** Sample Data, CSV Type **/ 주석으로 시작)
     * PostgreSQL DDL (/** Target - PostgreSQL DDL **/ 주석으로 시작)

6. 오류 처리:
   - 데이터베이스 연결 실패 시: 적절한 오류 메시지 출력 후 스크립트 종료
   - 테이블 DDL 추출 실패 시: 오류 로그에 기록하고 다음 테이블로 진행
   - 권한 문제 발생 시: 필요한 권한 안내 메시지 출력
   - 모든 오류는 error.log 파일에 기록

7. 진행 상황 표시:
   - 각 단계 시작과 완료 시 메시지 출력
   - 각 테이블 처리 시 진행 상황 표시 (예: "Processing table 10/50: TABLE_NAME")
   - 최종 완료 메시지와 출력 파일 위치 표시
   - 처리된 테이블 수와 오류 발생 테이블 수 요약

8. 명령줄 옵션:
   ```bash
   # 사용법 함수
   usage() {
     echo "사용법: $0 [옵션]"
     echo "옵션:"
     echo "  -s, --schema SCHEMA_NAME   특정 스키마만 처리 (기본값: 현재 사용자)"
     echo "  -t, --tables TABLE_LIST    특정 테이블만 처리 (쉼표로 구분)"
     echo "  -o, --output DIR           출력 디렉토리 지정 (기본값: \$OMA_ASSESSMENT/tab_ddl)"
     echo "  -f, --force                기존 파일 덮어쓰기"
     echo "  -v, --verbose              상세 로깅 활성화"
     echo "  -h, --help                 도움말 표시"
     exit 1
   }
   
   # 명령줄 인수 파싱
   SCHEMA=""
   TABLES=""
   OUTPUT_DIR=""
   FORCE=false
   VERBOSE=false
   
   while [[ $# -gt 0 ]]; do
     case $1 in
       -s|--schema)
         SCHEMA="$2"
         shift 2
         ;;
       -t|--tables)
         TABLES="$2"
         shift 2
         ;;
       -o|--output)
         OUTPUT_DIR="$2"
         shift 2
         ;;
       -f|--force)
         FORCE=true
         shift
         ;;
       -v|--verbose)
         VERBOSE=true
         shift
         ;;
       -h|--help)
         usage
         ;;
       *)
         echo "알 수 없는 옵션: $1"
         usage
         ;;
     esac
   done
   ```

9. 로깅 함수:
   ```bash
   # 로깅 함수
   log() {
     local level="$1"
     local message="$2"
     local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
     
     echo "[$timestamp] [$level] $message"
     
     if [[ "$level" == "ERROR" ]]; then
       echo "[$timestamp] [$level] $message" >> error.log
     fi
     
     if [[ "$VERBOSE" == true || "$level" == "ERROR" ]]; then
       echo "[$timestamp] [$level] $message" >> ddl_extraction.log
     fi
   }
   
   log_info() {
     log "INFO" "$1"
   }
   
   log_error() {
     log "ERROR" "$1"
   }
   
   log_success() {
     log "SUCCESS" "$1"
   }
   ```

10. 환경 변수 검증:
    ```bash
    # 필수 환경 변수 검증
    check_env_vars() {
      local missing_vars=()
      
      # Oracle 환경 변수
      [[ -z "$ORACLE_ADM_USER" ]] && missing_vars+=("ORACLE_ADM_USER")
      [[ -z "$ORACLE_ADM_PASSWORD" ]] && missing_vars+=("ORACLE_ADM_PASSWORD")
      [[ -z "$ORACLE_SID" ]] && missing_vars+=("ORACLE_SID")
      [[ -z "$ORACLE_SVC_USER" ]] && missing_vars+=("ORACLE_SVC_USER")
      
      # PostgreSQL 환경 변수
      [[ -z "$PGUSER" ]] && missing_vars+=("PGUSER")
      [[ -z "$PGPASSWORD" ]] && missing_vars+=("PGPASSWORD")
      [[ -z "$PGHOST" ]] && missing_vars+=("PGHOST")
      [[ -z "$PGPORT" ]] && missing_vars+=("PGPORT")
      [[ -z "$PGDATABASE" ]] && missing_vars+=("PGDATABASE")
      
      # OMA 환경 변수
      [[ -z "$OMA_ASSESSMENT" ]] && missing_vars+=("OMA_ASSESSMENT")
      
      if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "다음 환경 변수가 설정되지 않았습니다: ${missing_vars[*]}"
        return 1
      fi
      
      return 0
    }
    ```

스크립트는 bash로 작성되어야 하며, 환경 변수(OMA_ASSESSMENT, ORACLE_ADM_USER, ORACLE_ADM_PASSWORD, ORACLE_SID, PGUSER 등)를 사용하여 연결 정보를 가져와야 합니다. 또한 필요한 디렉토리가 없는 경우 자동으로 생성해야 합니다.
